// Generated by rstantools.  Do not edit by hand.

/*
    onlineMessageboardActivity is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    onlineMessageboardActivity is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with onlineMessageboardActivity.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_gpmcp_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_gpmcp");
    reader.add_event(164, 162, "end", "model_gpmcp");
    return reader;
}
#include <stan_meta_header.hpp>
class model_gpmcp
  : public stan::model::model_base_crtp<model_gpmcp> {
private:
        int N;
        int N_1;
        double a;
        double b;
        vector_d t;
        std::vector<int> bs;
        int N_type;
        std::vector<int> type;
        int is_hetero;
        int K;
        std::vector<double> f;
        double sigma_R;
        double sigma_phi;
        double sigma_eta;
        int ind_1;
        vector_d t_1;
        std::vector<int> bs_1;
        vector_d z;
        int N_latent;
        vector_d w;
        matrix_d sinusoidal_basis_1;
public:
    model_gpmcp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_gpmcp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_gpmcp_namespace::model_gpmcp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "N_1", "int", context__.to_vec());
            N_1 = int(0);
            vals_i__ = context__.vals_i("N_1");
            pos__ = 0;
            N_1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_1", N_1, 0);
            check_less_or_equal(function__, "N_1", N_1, N);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "a", "double", context__.to_vec());
            a = double(0);
            vals_r__ = context__.vals_r("a");
            pos__ = 0;
            a = vals_r__[pos__++];
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "b", "double", context__.to_vec());
            b = double(0);
            vals_r__ = context__.vals_r("b");
            pos__ = 0;
            b = vals_r__[pos__++];
            check_greater_or_equal(function__, "b", b, a);
            current_statement_begin__ = 10;
            validate_non_negative_index("t", "N", N);
            context__.validate_dims("data initialization", "t", "vector_d", context__.to_vec(N));
            t = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("t");
            pos__ = 0;
            size_t t_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < t_j_1_max__; ++j_1__) {
                t(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "t", t, a);
            check_less_or_equal(function__, "t", t, b);
            current_statement_begin__ = 11;
            validate_non_negative_index("bs", "N", N);
            context__.validate_dims("data initialization", "bs", "int", context__.to_vec(N));
            bs = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("bs");
            pos__ = 0;
            size_t bs_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < bs_k_0_max__; ++k_0__) {
                bs[k_0__] = vals_i__[pos__++];
            }
            size_t bs_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < bs_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "bs[i_0__]", bs[i_0__], 0);
                check_less_or_equal(function__, "bs[i_0__]", bs[i_0__], N);
            }
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "N_type", "int", context__.to_vec());
            N_type = int(0);
            vals_i__ = context__.vals_i("N_type");
            pos__ = 0;
            N_type = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_type", N_type, 1);
            current_statement_begin__ = 13;
            validate_non_negative_index("type", "N", N);
            context__.validate_dims("data initialization", "type", "int", context__.to_vec(N));
            type = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("type");
            pos__ = 0;
            size_t type_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < type_k_0_max__; ++k_0__) {
                type[k_0__] = vals_i__[pos__++];
            }
            size_t type_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < type_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "type[i_0__]", type[i_0__], 1);
                check_less_or_equal(function__, "type[i_0__]", type[i_0__], N_type);
            }
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "is_hetero", "int", context__.to_vec());
            is_hetero = int(0);
            vals_i__ = context__.vals_i("is_hetero");
            pos__ = 0;
            is_hetero = vals_i__[pos__++];
            check_greater_or_equal(function__, "is_hetero", is_hetero, 0);
            check_less_or_equal(function__, "is_hetero", is_hetero, 1);
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 16;
            validate_non_negative_index("f", "K", K);
            context__.validate_dims("data initialization", "f", "double", context__.to_vec(K));
            f = std::vector<double>(K, double(0));
            vals_r__ = context__.vals_r("f");
            pos__ = 0;
            size_t f_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < f_k_0_max__; ++k_0__) {
                f[k_0__] = vals_r__[pos__++];
            }
            size_t f_i_0_max__ = K;
            for (size_t i_0__ = 0; i_0__ < f_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "f[i_0__]", f[i_0__], 0);
            }
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "sigma_R", "double", context__.to_vec());
            sigma_R = double(0);
            vals_r__ = context__.vals_r("sigma_R");
            pos__ = 0;
            sigma_R = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_R", sigma_R, 0);
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "sigma_phi", "double", context__.to_vec());
            sigma_phi = double(0);
            vals_r__ = context__.vals_r("sigma_phi");
            pos__ = 0;
            sigma_phi = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_phi", sigma_phi, 0);
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "sigma_eta", "double", context__.to_vec());
            sigma_eta = double(0);
            vals_r__ = context__.vals_r("sigma_eta");
            pos__ = 0;
            sigma_eta = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_eta", sigma_eta, 0);
            // initialize transformed data variables
            current_statement_begin__ = 23;
            ind_1 = int(0);
            stan::math::fill(ind_1, std::numeric_limits<int>::min());
            current_statement_begin__ = 24;
            validate_non_negative_index("t_1", "N_1", N_1);
            t_1 = Eigen::Matrix<double, Eigen::Dynamic, 1>(N_1);
            stan::math::fill(t_1, DUMMY_VAR__);
            current_statement_begin__ = 25;
            validate_non_negative_index("bs_1", "N_1", N_1);
            bs_1 = std::vector<int>(N_1, int(0));
            stan::math::fill(bs_1, std::numeric_limits<int>::min());
            current_statement_begin__ = 26;
            validate_non_negative_index("z", "N", N);
            z = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            stan::math::fill(z, DUMMY_VAR__);
            current_statement_begin__ = 27;
            N_latent = int(0);
            stan::math::fill(N_latent, std::numeric_limits<int>::min());
            current_statement_begin__ = 28;
            validate_non_negative_index("w", "K", K);
            w = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            stan::math::fill(w, DUMMY_VAR__);
            current_statement_begin__ = 29;
            validate_non_negative_index("sinusoidal_basis_1", "N_1", N_1);
            validate_non_negative_index("sinusoidal_basis_1", "(2 * K)", (2 * K));
            sinusoidal_basis_1 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N_1, (2 * K));
            stan::math::fill(sinusoidal_basis_1, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 31;
            stan::math::assign(ind_1, 0);
            current_statement_begin__ = 32;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 33;
                if (as_bool(logical_neq(get_base1(bs, i, "bs", 1), 0))) {
                    current_statement_begin__ = 34;
                    stan::math::assign(ind_1, (ind_1 + 1));
                    current_statement_begin__ = 35;
                    stan::model::assign(t_1, 
                                stan::model::cons_list(stan::model::index_uni(ind_1), stan::model::nil_index_list()), 
                                get_base1(t, i, "t", 1), 
                                "assigning variable t_1");
                    current_statement_begin__ = 36;
                    stan::model::assign(bs_1, 
                                stan::model::cons_list(stan::model::index_uni(ind_1), stan::model::nil_index_list()), 
                                get_base1(bs, i, "bs", 1), 
                                "assigning variable bs_1");
                }
                current_statement_begin__ = 38;
                stan::model::assign(z, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable z");
                current_statement_begin__ = 39;
                for (int j = (i + 1); j <= N; ++j) {
                    current_statement_begin__ = 40;
                    stan::model::assign(z, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(z, i, "z", 1) + logical_eq(get_base1(bs, j, "bs", 1), i)), 
                                "assigning variable z");
                }
            }
            current_statement_begin__ = 44;
            if (as_bool(is_hetero)) {
                current_statement_begin__ = 45;
                stan::math::assign(N_latent, N);
            } else {
                current_statement_begin__ = 47;
                stan::math::assign(N_latent, 0);
            }
            current_statement_begin__ = 50;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 51;
                stan::model::assign(w, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            ((2 * stan::math::pi()) * get_base1(f, k, "f", 1)), 
                            "assigning variable w");
                current_statement_begin__ = 52;
                stan::model::assign(sinusoidal_basis_1, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(((2 * k) - 1)), stan::model::nil_index_list())), 
                            stan::math::sin(multiply(get_base1(w, k, "w", 1), t_1)), 
                            "assigning variable sinusoidal_basis_1");
                current_statement_begin__ = 53;
                stan::model::assign(sinusoidal_basis_1, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((2 * k)), stan::model::nil_index_list())), 
                            stan::math::cos(multiply(get_base1(w, k, "w", 1), t_1)), 
                            "assigning variable sinusoidal_basis_1");
            }
            // validate transformed data
            current_statement_begin__ = 26;
            check_greater_or_equal(function__, "z", z, 0);
            check_less_or_equal(function__, "z", z, N);
            current_statement_begin__ = 28;
            check_greater_or_equal(function__, "w", w, 0);
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 58;
            validate_non_negative_index("log_R", "N_type", N_type);
            num_params_r__ += (1 * N_type);
            current_statement_begin__ = 59;
            validate_non_negative_index("log_phi", "(is_hetero * N_type)", (is_hetero * N_type));
            num_params_r__ += (1 * (is_hetero * N_type));
            current_statement_begin__ = 60;
            validate_non_negative_index("log_eta", "N_type", N_type);
            num_params_r__ += (1 * N_type);
            current_statement_begin__ = 61;
            validate_non_negative_index("nu", "N_latent", N_latent);
            num_params_r__ += N_latent;
            current_statement_begin__ = 62;
            validate_non_negative_index("beta", "(2 * K)", (2 * K));
            num_params_r__ += (2 * K);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_gpmcp() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 58;
        if (!(context__.contains_r("log_R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_R");
        pos__ = 0U;
        validate_non_negative_index("log_R", "N_type", N_type);
        context__.validate_dims("parameter initialization", "log_R", "double", context__.to_vec(N_type));
        std::vector<double> log_R(N_type, double(0));
        size_t log_R_k_0_max__ = N_type;
        for (size_t k_0__ = 0; k_0__ < log_R_k_0_max__; ++k_0__) {
            log_R[k_0__] = vals_r__[pos__++];
        }
        size_t log_R_i_0_max__ = N_type;
        for (size_t i_0__ = 0; i_0__ < log_R_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(log_R[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_R: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("log_phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_phi");
        pos__ = 0U;
        validate_non_negative_index("log_phi", "(is_hetero * N_type)", (is_hetero * N_type));
        context__.validate_dims("parameter initialization", "log_phi", "double", context__.to_vec((is_hetero * N_type)));
        std::vector<double> log_phi((is_hetero * N_type), double(0));
        size_t log_phi_k_0_max__ = (is_hetero * N_type);
        for (size_t k_0__ = 0; k_0__ < log_phi_k_0_max__; ++k_0__) {
            log_phi[k_0__] = vals_r__[pos__++];
        }
        size_t log_phi_i_0_max__ = (is_hetero * N_type);
        for (size_t i_0__ = 0; i_0__ < log_phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(log_phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 60;
        if (!(context__.contains_r("log_eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_eta");
        pos__ = 0U;
        validate_non_negative_index("log_eta", "N_type", N_type);
        context__.validate_dims("parameter initialization", "log_eta", "double", context__.to_vec(N_type));
        std::vector<double> log_eta(N_type, double(0));
        size_t log_eta_k_0_max__ = N_type;
        for (size_t k_0__ = 0; k_0__ < log_eta_k_0_max__; ++k_0__) {
            log_eta[k_0__] = vals_r__[pos__++];
        }
        size_t log_eta_i_0_max__ = N_type;
        for (size_t i_0__ = 0; i_0__ < log_eta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(log_eta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_eta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 61;
        if (!(context__.contains_r("nu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        validate_non_negative_index("nu", "N_latent", N_latent);
        context__.validate_dims("parameter initialization", "nu", "vector_d", context__.to_vec(N_latent));
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu(N_latent);
        size_t nu_j_1_max__ = N_latent;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            nu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, nu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 62;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "(2 * K)", (2 * K));
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec((2 * K)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta((2 * K));
        size_t beta_j_1_max__ = (2 * K);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(-(1), 1, beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 58;
            std::vector<local_scalar_t__> log_R;
            size_t log_R_d_0_max__ = N_type;
            log_R.reserve(log_R_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < log_R_d_0_max__; ++d_0__) {
                if (jacobian__)
                    log_R.push_back(in__.scalar_constrain(lp__));
                else
                    log_R.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 59;
            std::vector<local_scalar_t__> log_phi;
            size_t log_phi_d_0_max__ = (is_hetero * N_type);
            log_phi.reserve(log_phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < log_phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    log_phi.push_back(in__.scalar_constrain(lp__));
                else
                    log_phi.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 60;
            std::vector<local_scalar_t__> log_eta;
            size_t log_eta_d_0_max__ = N_type;
            log_eta.reserve(log_eta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < log_eta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    log_eta.push_back(in__.scalar_constrain(lp__));
                else
                    log_eta.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 61;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> nu;
            (void) nu;  // dummy to suppress unused var warning
            if (jacobian__)
                nu = in__.vector_lb_constrain(0, N_latent, lp__);
            else
                nu = in__.vector_lb_constrain(0, N_latent);
            current_statement_begin__ = 62;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_lub_constrain(-(1), 1, (2 * K), lp__);
            else
                beta = in__.vector_lub_constrain(-(1), 1, (2 * K));
            // transformed parameters
            current_statement_begin__ = 66;
            validate_non_negative_index("R", "N_type", N_type);
            std::vector<local_scalar_t__> R(N_type, local_scalar_t__(0));
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("phi", "(is_hetero * N_type)", (is_hetero * N_type));
            std::vector<local_scalar_t__> phi((is_hetero * N_type), local_scalar_t__(0));
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("eta", "N_type", N_type);
            std::vector<local_scalar_t__> eta(N_type, local_scalar_t__(0));
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 69;
            validate_non_negative_index("alpha_1", "N_1", N_1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_1(N_1);
            stan::math::initialize(alpha_1, DUMMY_VAR__);
            stan::math::fill(alpha_1, DUMMY_VAR__);
            current_statement_begin__ = 70;
            validate_non_negative_index("exp_sinusoidal_basis_integral", "N", N);
            validate_non_negative_index("exp_sinusoidal_basis_integral", "(2 * K)", (2 * K));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> exp_sinusoidal_basis_integral(N, (2 * K));
            stan::math::initialize(exp_sinusoidal_basis_integral, DUMMY_VAR__);
            stan::math::fill(exp_sinusoidal_basis_integral, DUMMY_VAR__);
            current_statement_begin__ = 71;
            validate_non_negative_index("tmp_offspring_log_intensity_vector", "N_1", N_1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tmp_offspring_log_intensity_vector(N_1);
            stan::math::initialize(tmp_offspring_log_intensity_vector, DUMMY_VAR__);
            stan::math::fill(tmp_offspring_log_intensity_vector, DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("tmp_offspring_scalar_vector", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tmp_offspring_scalar_vector(N);
            stan::math::initialize(tmp_offspring_scalar_vector, DUMMY_VAR__);
            stan::math::fill(tmp_offspring_scalar_vector, DUMMY_VAR__);
            current_statement_begin__ = 73;
            local_scalar_t__ offspring_log_intensity;
            (void) offspring_log_intensity;  // dummy to suppress unused var warning
            stan::math::initialize(offspring_log_intensity, DUMMY_VAR__);
            stan::math::fill(offspring_log_intensity, DUMMY_VAR__);
            current_statement_begin__ = 74;
            local_scalar_t__ offspring_scalar;
            (void) offspring_scalar;  // dummy to suppress unused var warning
            stan::math::initialize(offspring_scalar, DUMMY_VAR__);
            stan::math::fill(offspring_scalar, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 76;
            stan::math::assign(R, stan::math::exp(log_R));
            current_statement_begin__ = 77;
            if (as_bool(is_hetero)) {
                current_statement_begin__ = 78;
                stan::math::assign(phi, stan::math::exp(log_phi));
            }
            current_statement_begin__ = 80;
            stan::math::assign(eta, stan::math::exp(log_eta));
            current_statement_begin__ = 82;
            stan::math::assign(alpha_1, rep_vector(1, N_1));
            current_statement_begin__ = 83;
            if (as_bool(logical_neq(K, 0))) {
                current_statement_begin__ = 84;
                stan::math::assign(alpha_1, add(alpha_1, multiply(sinusoidal_basis_1, beta)));
            }
            current_statement_begin__ = 86;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 87;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 88;
                    stan::model::assign(exp_sinusoidal_basis_integral, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(((2 * k) - 1)), stan::model::nil_index_list())), 
                                ((get_base1(eta, get_base1(type, i, "type", 1), "eta", 1) / (pow(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1), 2) + pow(get_base1(w, k, "w", 1), 2))) * ((get_base1(eta, get_base1(type, i, "type", 1), "eta", 1) * (stan::math::sin((get_base1(w, k, "w", 1) * get_base1(t, i, "t", 1))) - (stan::math::sin((get_base1(w, k, "w", 1) * b)) * stan::math::exp((-(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1)) * (b - get_base1(t, i, "t", 1))))))) + (get_base1(w, k, "w", 1) * (stan::math::cos((get_base1(w, k, "w", 1) * get_base1(t, i, "t", 1))) - (stan::math::cos((get_base1(w, k, "w", 1) * b)) * stan::math::exp((-(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1)) * (b - get_base1(t, i, "t", 1))))))))), 
                                "assigning variable exp_sinusoidal_basis_integral");
                    current_statement_begin__ = 92;
                    stan::model::assign(exp_sinusoidal_basis_integral, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((2 * k)), stan::model::nil_index_list())), 
                                ((get_base1(eta, get_base1(type, i, "type", 1), "eta", 1) / (pow(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1), 2) + pow(get_base1(w, k, "w", 1), 2))) * ((get_base1(w, k, "w", 1) * ((stan::math::sin((get_base1(w, k, "w", 1) * b)) * stan::math::exp((-(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1)) * (b - get_base1(t, i, "t", 1))))) - stan::math::sin((get_base1(w, k, "w", 1) * get_base1(t, i, "t", 1))))) - (get_base1(eta, get_base1(type, i, "type", 1), "eta", 1) * ((stan::math::cos((get_base1(w, k, "w", 1) * b)) * stan::math::exp((-(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1)) * (b - get_base1(t, i, "t", 1))))) - stan::math::cos((get_base1(w, k, "w", 1) * get_base1(t, i, "t", 1))))))), 
                                "assigning variable exp_sinusoidal_basis_integral");
                }
            }
            current_statement_begin__ = 100;
            stan::math::assign(offspring_log_intensity, sum(stan::math::log(alpha_1)));
            current_statement_begin__ = 102;
            if (as_bool(is_hetero)) {
                current_statement_begin__ = 103;
                stan::math::assign(offspring_log_intensity, (offspring_log_intensity + sum(elt_multiply(z, stan::math::log(nu)))));
            } else {
                current_statement_begin__ = 105;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 106;
                    stan::math::assign(offspring_log_intensity, (offspring_log_intensity + (get_base1(z, i, "z", 1) * get_base1(log_R, get_base1(type, i, "type", 1), "log_R", 1))));
                }
            }
            current_statement_begin__ = 110;
            for (int i = 1; i <= N_1; ++i) {
                current_statement_begin__ = 111;
                stan::model::assign(tmp_offspring_log_intensity_vector, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exponential_log((get_base1(t_1, i, "t_1", 1) - get_base1(t, get_base1(bs_1, i, "bs_1", 1), "t", 1)), get_base1(eta, get_base1(type, get_base1(bs_1, i, "bs_1", 1), "type", 1), "eta", 1)), 
                            "assigning variable tmp_offspring_log_intensity_vector");
            }
            current_statement_begin__ = 113;
            stan::math::assign(offspring_log_intensity, (offspring_log_intensity + sum(tmp_offspring_log_intensity_vector)));
            current_statement_begin__ = 116;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 117;
                stan::model::assign(tmp_offspring_scalar_vector, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exponential_cdf((b - get_base1(t, i, "t", 1)), get_base1(eta, get_base1(type, i, "type", 1), "eta", 1)), 
                            "assigning variable tmp_offspring_scalar_vector");
            }
            current_statement_begin__ = 120;
            if (as_bool(logical_neq(K, 0))) {
                current_statement_begin__ = 121;
                stan::math::assign(tmp_offspring_scalar_vector, add(tmp_offspring_scalar_vector, multiply(exp_sinusoidal_basis_integral, beta)));
            }
            current_statement_begin__ = 124;
            if (as_bool(is_hetero)) {
                current_statement_begin__ = 125;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 126;
                    stan::model::assign(tmp_offspring_scalar_vector, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(nu, i, "nu", 1) * get_base1(tmp_offspring_scalar_vector, i, "tmp_offspring_scalar_vector", 1)), 
                                "assigning variable tmp_offspring_scalar_vector");
                }
            } else {
                current_statement_begin__ = 129;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 130;
                    stan::model::assign(tmp_offspring_scalar_vector, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(R, get_base1(type, i, "type", 1), "R", 1) * get_base1(tmp_offspring_scalar_vector, i, "tmp_offspring_scalar_vector", 1)), 
                                "assigning variable tmp_offspring_scalar_vector");
                }
            }
            current_statement_begin__ = 133;
            stan::math::assign(offspring_scalar, sum(tmp_offspring_scalar_vector));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 66;
            size_t R_k_0_max__ = N_type;
            for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(R[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: R" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable R: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t R_i_0_max__ = N_type;
            for (size_t i_0__ = 0; i_0__ < R_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "R[i_0__]", R[i_0__], 0);
            }
            current_statement_begin__ = 67;
            size_t phi_k_0_max__ = (is_hetero * N_type);
            for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(phi[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: phi" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t phi_i_0_max__ = (is_hetero * N_type);
            for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "phi[i_0__]", phi[i_0__], 0);
            }
            current_statement_begin__ = 68;
            size_t eta_k_0_max__ = N_type;
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(eta[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eta" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t eta_i_0_max__ = N_type;
            for (size_t i_0__ = 0; i_0__ < eta_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "eta[i_0__]", eta[i_0__], 0);
            }
            current_statement_begin__ = 69;
            size_t alpha_1_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < alpha_1_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alpha_1(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha_1" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha_1: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "alpha_1", alpha_1, 0);
            check_less_or_equal(function__, "alpha_1", alpha_1, 2);
            current_statement_begin__ = 70;
            size_t exp_sinusoidal_basis_integral_j_1_max__ = N;
            size_t exp_sinusoidal_basis_integral_j_2_max__ = (2 * K);
            for (size_t j_1__ = 0; j_1__ < exp_sinusoidal_basis_integral_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < exp_sinusoidal_basis_integral_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(exp_sinusoidal_basis_integral(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: exp_sinusoidal_basis_integral" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable exp_sinusoidal_basis_integral: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 71;
            size_t tmp_offspring_log_intensity_vector_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < tmp_offspring_log_intensity_vector_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(tmp_offspring_log_intensity_vector(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: tmp_offspring_log_intensity_vector" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tmp_offspring_log_intensity_vector: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 72;
            size_t tmp_offspring_scalar_vector_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < tmp_offspring_scalar_vector_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(tmp_offspring_scalar_vector(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: tmp_offspring_scalar_vector" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tmp_offspring_scalar_vector: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "tmp_offspring_scalar_vector", tmp_offspring_scalar_vector, 0);
            current_statement_begin__ = 73;
            if (stan::math::is_uninitialized(offspring_log_intensity)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: offspring_log_intensity";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable offspring_log_intensity: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 74;
            if (stan::math::is_uninitialized(offspring_scalar)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: offspring_scalar";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable offspring_scalar: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "offspring_scalar", offspring_scalar, 0);
            // model body
            current_statement_begin__ = 138;
            lp_accum__.add(offspring_log_intensity);
            current_statement_begin__ = 139;
            lp_accum__.add(-(offspring_scalar));
            current_statement_begin__ = 140;
            if (as_bool(is_hetero)) {
                current_statement_begin__ = 141;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 142;
                    lp_accum__.add(gamma_log(get_base1(nu, i, "nu", 1), get_base1(phi, get_base1(type, i, "type", 1), "phi", 1), (get_base1(phi, get_base1(type, i, "type", 1), "phi", 1) / get_base1(R, get_base1(type, i, "type", 1), "R", 1))));
                }
            }
            current_statement_begin__ = 146;
            lp_accum__.add(normal_log(log_R, 0, sigma_R));
            current_statement_begin__ = 147;
            if (as_bool(is_hetero)) {
                current_statement_begin__ = 148;
                lp_accum__.add(normal_log(log_phi, 0, sigma_phi));
            }
            current_statement_begin__ = 150;
            lp_accum__.add(normal_log(log_eta, 0, sigma_eta));
            current_statement_begin__ = 151;
            lp_accum__.add(uniform_log(beta, -(1), 1));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("log_R");
        names__.push_back("log_phi");
        names__.push_back("log_eta");
        names__.push_back("nu");
        names__.push_back("beta");
        names__.push_back("R");
        names__.push_back("phi");
        names__.push_back("eta");
        names__.push_back("alpha_1");
        names__.push_back("exp_sinusoidal_basis_integral");
        names__.push_back("tmp_offspring_log_intensity_vector");
        names__.push_back("tmp_offspring_scalar_vector");
        names__.push_back("offspring_log_intensity");
        names__.push_back("offspring_scalar");
        names__.push_back("A");
        names__.push_back("phase");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N_type);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((is_hetero * N_type));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_type);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_latent);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((2 * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_type);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((is_hetero * N_type));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_type);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back((2 * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_gpmcp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> log_R;
        size_t log_R_d_0_max__ = N_type;
        log_R.reserve(log_R_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < log_R_d_0_max__; ++d_0__) {
            log_R.push_back(in__.scalar_constrain());
        }
        size_t log_R_k_0_max__ = N_type;
        for (size_t k_0__ = 0; k_0__ < log_R_k_0_max__; ++k_0__) {
            vars__.push_back(log_R[k_0__]);
        }
        std::vector<double> log_phi;
        size_t log_phi_d_0_max__ = (is_hetero * N_type);
        log_phi.reserve(log_phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < log_phi_d_0_max__; ++d_0__) {
            log_phi.push_back(in__.scalar_constrain());
        }
        size_t log_phi_k_0_max__ = (is_hetero * N_type);
        for (size_t k_0__ = 0; k_0__ < log_phi_k_0_max__; ++k_0__) {
            vars__.push_back(log_phi[k_0__]);
        }
        std::vector<double> log_eta;
        size_t log_eta_d_0_max__ = N_type;
        log_eta.reserve(log_eta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < log_eta_d_0_max__; ++d_0__) {
            log_eta.push_back(in__.scalar_constrain());
        }
        size_t log_eta_k_0_max__ = N_type;
        for (size_t k_0__ = 0; k_0__ < log_eta_k_0_max__; ++k_0__) {
            vars__.push_back(log_eta[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> nu = in__.vector_lb_constrain(0, N_latent);
        size_t nu_j_1_max__ = N_latent;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            vars__.push_back(nu(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_lub_constrain(-(1), 1, (2 * K));
        size_t beta_j_1_max__ = (2 * K);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 66;
            validate_non_negative_index("R", "N_type", N_type);
            std::vector<double> R(N_type, double(0));
            stan::math::initialize(R, DUMMY_VAR__);
            stan::math::fill(R, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("phi", "(is_hetero * N_type)", (is_hetero * N_type));
            std::vector<double> phi((is_hetero * N_type), double(0));
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("eta", "N_type", N_type);
            std::vector<double> eta(N_type, double(0));
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 69;
            validate_non_negative_index("alpha_1", "N_1", N_1);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_1(N_1);
            stan::math::initialize(alpha_1, DUMMY_VAR__);
            stan::math::fill(alpha_1, DUMMY_VAR__);
            current_statement_begin__ = 70;
            validate_non_negative_index("exp_sinusoidal_basis_integral", "N", N);
            validate_non_negative_index("exp_sinusoidal_basis_integral", "(2 * K)", (2 * K));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> exp_sinusoidal_basis_integral(N, (2 * K));
            stan::math::initialize(exp_sinusoidal_basis_integral, DUMMY_VAR__);
            stan::math::fill(exp_sinusoidal_basis_integral, DUMMY_VAR__);
            current_statement_begin__ = 71;
            validate_non_negative_index("tmp_offspring_log_intensity_vector", "N_1", N_1);
            Eigen::Matrix<double, Eigen::Dynamic, 1> tmp_offspring_log_intensity_vector(N_1);
            stan::math::initialize(tmp_offspring_log_intensity_vector, DUMMY_VAR__);
            stan::math::fill(tmp_offspring_log_intensity_vector, DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("tmp_offspring_scalar_vector", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> tmp_offspring_scalar_vector(N);
            stan::math::initialize(tmp_offspring_scalar_vector, DUMMY_VAR__);
            stan::math::fill(tmp_offspring_scalar_vector, DUMMY_VAR__);
            current_statement_begin__ = 73;
            double offspring_log_intensity;
            (void) offspring_log_intensity;  // dummy to suppress unused var warning
            stan::math::initialize(offspring_log_intensity, DUMMY_VAR__);
            stan::math::fill(offspring_log_intensity, DUMMY_VAR__);
            current_statement_begin__ = 74;
            double offspring_scalar;
            (void) offspring_scalar;  // dummy to suppress unused var warning
            stan::math::initialize(offspring_scalar, DUMMY_VAR__);
            stan::math::fill(offspring_scalar, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 76;
            stan::math::assign(R, stan::math::exp(log_R));
            current_statement_begin__ = 77;
            if (as_bool(is_hetero)) {
                current_statement_begin__ = 78;
                stan::math::assign(phi, stan::math::exp(log_phi));
            }
            current_statement_begin__ = 80;
            stan::math::assign(eta, stan::math::exp(log_eta));
            current_statement_begin__ = 82;
            stan::math::assign(alpha_1, rep_vector(1, N_1));
            current_statement_begin__ = 83;
            if (as_bool(logical_neq(K, 0))) {
                current_statement_begin__ = 84;
                stan::math::assign(alpha_1, add(alpha_1, multiply(sinusoidal_basis_1, beta)));
            }
            current_statement_begin__ = 86;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 87;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 88;
                    stan::model::assign(exp_sinusoidal_basis_integral, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(((2 * k) - 1)), stan::model::nil_index_list())), 
                                ((get_base1(eta, get_base1(type, i, "type", 1), "eta", 1) / (pow(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1), 2) + pow(get_base1(w, k, "w", 1), 2))) * ((get_base1(eta, get_base1(type, i, "type", 1), "eta", 1) * (stan::math::sin((get_base1(w, k, "w", 1) * get_base1(t, i, "t", 1))) - (stan::math::sin((get_base1(w, k, "w", 1) * b)) * stan::math::exp((-(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1)) * (b - get_base1(t, i, "t", 1))))))) + (get_base1(w, k, "w", 1) * (stan::math::cos((get_base1(w, k, "w", 1) * get_base1(t, i, "t", 1))) - (stan::math::cos((get_base1(w, k, "w", 1) * b)) * stan::math::exp((-(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1)) * (b - get_base1(t, i, "t", 1))))))))), 
                                "assigning variable exp_sinusoidal_basis_integral");
                    current_statement_begin__ = 92;
                    stan::model::assign(exp_sinusoidal_basis_integral, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((2 * k)), stan::model::nil_index_list())), 
                                ((get_base1(eta, get_base1(type, i, "type", 1), "eta", 1) / (pow(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1), 2) + pow(get_base1(w, k, "w", 1), 2))) * ((get_base1(w, k, "w", 1) * ((stan::math::sin((get_base1(w, k, "w", 1) * b)) * stan::math::exp((-(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1)) * (b - get_base1(t, i, "t", 1))))) - stan::math::sin((get_base1(w, k, "w", 1) * get_base1(t, i, "t", 1))))) - (get_base1(eta, get_base1(type, i, "type", 1), "eta", 1) * ((stan::math::cos((get_base1(w, k, "w", 1) * b)) * stan::math::exp((-(get_base1(eta, get_base1(type, i, "type", 1), "eta", 1)) * (b - get_base1(t, i, "t", 1))))) - stan::math::cos((get_base1(w, k, "w", 1) * get_base1(t, i, "t", 1))))))), 
                                "assigning variable exp_sinusoidal_basis_integral");
                }
            }
            current_statement_begin__ = 100;
            stan::math::assign(offspring_log_intensity, sum(stan::math::log(alpha_1)));
            current_statement_begin__ = 102;
            if (as_bool(is_hetero)) {
                current_statement_begin__ = 103;
                stan::math::assign(offspring_log_intensity, (offspring_log_intensity + sum(elt_multiply(z, stan::math::log(nu)))));
            } else {
                current_statement_begin__ = 105;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 106;
                    stan::math::assign(offspring_log_intensity, (offspring_log_intensity + (get_base1(z, i, "z", 1) * get_base1(log_R, get_base1(type, i, "type", 1), "log_R", 1))));
                }
            }
            current_statement_begin__ = 110;
            for (int i = 1; i <= N_1; ++i) {
                current_statement_begin__ = 111;
                stan::model::assign(tmp_offspring_log_intensity_vector, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exponential_log((get_base1(t_1, i, "t_1", 1) - get_base1(t, get_base1(bs_1, i, "bs_1", 1), "t", 1)), get_base1(eta, get_base1(type, get_base1(bs_1, i, "bs_1", 1), "type", 1), "eta", 1)), 
                            "assigning variable tmp_offspring_log_intensity_vector");
            }
            current_statement_begin__ = 113;
            stan::math::assign(offspring_log_intensity, (offspring_log_intensity + sum(tmp_offspring_log_intensity_vector)));
            current_statement_begin__ = 116;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 117;
                stan::model::assign(tmp_offspring_scalar_vector, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            exponential_cdf((b - get_base1(t, i, "t", 1)), get_base1(eta, get_base1(type, i, "type", 1), "eta", 1)), 
                            "assigning variable tmp_offspring_scalar_vector");
            }
            current_statement_begin__ = 120;
            if (as_bool(logical_neq(K, 0))) {
                current_statement_begin__ = 121;
                stan::math::assign(tmp_offspring_scalar_vector, add(tmp_offspring_scalar_vector, multiply(exp_sinusoidal_basis_integral, beta)));
            }
            current_statement_begin__ = 124;
            if (as_bool(is_hetero)) {
                current_statement_begin__ = 125;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 126;
                    stan::model::assign(tmp_offspring_scalar_vector, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(nu, i, "nu", 1) * get_base1(tmp_offspring_scalar_vector, i, "tmp_offspring_scalar_vector", 1)), 
                                "assigning variable tmp_offspring_scalar_vector");
                }
            } else {
                current_statement_begin__ = 129;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 130;
                    stan::model::assign(tmp_offspring_scalar_vector, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (get_base1(R, get_base1(type, i, "type", 1), "R", 1) * get_base1(tmp_offspring_scalar_vector, i, "tmp_offspring_scalar_vector", 1)), 
                                "assigning variable tmp_offspring_scalar_vector");
                }
            }
            current_statement_begin__ = 133;
            stan::math::assign(offspring_scalar, sum(tmp_offspring_scalar_vector));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 66;
            size_t R_i_0_max__ = N_type;
            for (size_t i_0__ = 0; i_0__ < R_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "R[i_0__]", R[i_0__], 0);
            }
            current_statement_begin__ = 67;
            size_t phi_i_0_max__ = (is_hetero * N_type);
            for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "phi[i_0__]", phi[i_0__], 0);
            }
            current_statement_begin__ = 68;
            size_t eta_i_0_max__ = N_type;
            for (size_t i_0__ = 0; i_0__ < eta_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "eta[i_0__]", eta[i_0__], 0);
            }
            current_statement_begin__ = 69;
            check_greater_or_equal(function__, "alpha_1", alpha_1, 0);
            check_less_or_equal(function__, "alpha_1", alpha_1, 2);
            current_statement_begin__ = 72;
            check_greater_or_equal(function__, "tmp_offspring_scalar_vector", tmp_offspring_scalar_vector, 0);
            current_statement_begin__ = 74;
            check_greater_or_equal(function__, "offspring_scalar", offspring_scalar, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t R_k_0_max__ = N_type;
                for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
                    vars__.push_back(R[k_0__]);
                }
                size_t phi_k_0_max__ = (is_hetero * N_type);
                for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                    vars__.push_back(phi[k_0__]);
                }
                size_t eta_k_0_max__ = N_type;
                for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                    vars__.push_back(eta[k_0__]);
                }
                size_t alpha_1_j_1_max__ = N_1;
                for (size_t j_1__ = 0; j_1__ < alpha_1_j_1_max__; ++j_1__) {
                    vars__.push_back(alpha_1(j_1__));
                }
                size_t exp_sinusoidal_basis_integral_j_2_max__ = (2 * K);
                size_t exp_sinusoidal_basis_integral_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < exp_sinusoidal_basis_integral_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < exp_sinusoidal_basis_integral_j_1_max__; ++j_1__) {
                        vars__.push_back(exp_sinusoidal_basis_integral(j_1__, j_2__));
                    }
                }
                size_t tmp_offspring_log_intensity_vector_j_1_max__ = N_1;
                for (size_t j_1__ = 0; j_1__ < tmp_offspring_log_intensity_vector_j_1_max__; ++j_1__) {
                    vars__.push_back(tmp_offspring_log_intensity_vector(j_1__));
                }
                size_t tmp_offspring_scalar_vector_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < tmp_offspring_scalar_vector_j_1_max__; ++j_1__) {
                    vars__.push_back(tmp_offspring_scalar_vector(j_1__));
                }
                vars__.push_back(offspring_log_intensity);
                vars__.push_back(offspring_scalar);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 155;
            validate_non_negative_index("A", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> A(K);
            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A, DUMMY_VAR__);
            current_statement_begin__ = 156;
            validate_non_negative_index("phase", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> phase(K);
            stan::math::initialize(phase, DUMMY_VAR__);
            stan::math::fill(phase, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 158;
            for (int k = 1; k <= K; ++k) {
                current_statement_begin__ = 159;
                stan::model::assign(A, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            stan::math::sqrt((pow(get_base1(beta, ((2 * k) - 1), "beta", 1), 2) + pow(get_base1(beta, (2 * k), "beta", 1), 2))), 
                            "assigning variable A");
                current_statement_begin__ = 160;
                stan::model::assign(phase, 
                            stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                            atan2(get_base1(beta, (2 * k), "beta", 1), get_base1(beta, ((2 * k) - 1), "beta", 1)), 
                            "assigning variable phase");
            }
            // validate, write generated quantities
            current_statement_begin__ = 155;
            size_t A_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                vars__.push_back(A(j_1__));
            }
            current_statement_begin__ = 156;
            size_t phase_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < phase_j_1_max__; ++j_1__) {
                vars__.push_back(phase(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_gpmcp";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t log_R_k_0_max__ = N_type;
        for (size_t k_0__ = 0; k_0__ < log_R_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_R" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_phi_k_0_max__ = (is_hetero * N_type);
        for (size_t k_0__ = 0; k_0__ < log_phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_eta_k_0_max__ = N_type;
        for (size_t k_0__ = 0; k_0__ < log_eta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_eta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_j_1_max__ = N_latent;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = (2 * K);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t R_k_0_max__ = N_type;
            for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t phi_k_0_max__ = (is_hetero * N_type);
            for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_k_0_max__ = N_type;
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t alpha_1_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < alpha_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t exp_sinusoidal_basis_integral_j_2_max__ = (2 * K);
            size_t exp_sinusoidal_basis_integral_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < exp_sinusoidal_basis_integral_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < exp_sinusoidal_basis_integral_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "exp_sinusoidal_basis_integral" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t tmp_offspring_log_intensity_vector_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < tmp_offspring_log_intensity_vector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tmp_offspring_log_intensity_vector" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t tmp_offspring_scalar_vector_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < tmp_offspring_scalar_vector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tmp_offspring_scalar_vector" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "offspring_log_intensity";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "offspring_scalar";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t A_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phase_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phase_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phase" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t log_R_k_0_max__ = N_type;
        for (size_t k_0__ = 0; k_0__ < log_R_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_R" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_phi_k_0_max__ = (is_hetero * N_type);
        for (size_t k_0__ = 0; k_0__ < log_phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_eta_k_0_max__ = N_type;
        for (size_t k_0__ = 0; k_0__ < log_eta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_eta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_j_1_max__ = N_latent;
        for (size_t j_1__ = 0; j_1__ < nu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = (2 * K);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t R_k_0_max__ = N_type;
            for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "R" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t phi_k_0_max__ = (is_hetero * N_type);
            for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_k_0_max__ = N_type;
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t alpha_1_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < alpha_1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha_1" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t exp_sinusoidal_basis_integral_j_2_max__ = (2 * K);
            size_t exp_sinusoidal_basis_integral_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < exp_sinusoidal_basis_integral_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < exp_sinusoidal_basis_integral_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "exp_sinusoidal_basis_integral" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t tmp_offspring_log_intensity_vector_j_1_max__ = N_1;
            for (size_t j_1__ = 0; j_1__ < tmp_offspring_log_intensity_vector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tmp_offspring_log_intensity_vector" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t tmp_offspring_scalar_vector_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < tmp_offspring_scalar_vector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tmp_offspring_scalar_vector" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "offspring_log_intensity";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "offspring_scalar";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t A_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phase_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phase_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phase" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_gpmcp_namespace::model_gpmcp stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
