// Generated by rstantools.  Do not edit by hand.

/*
    onlineMessageboardActivity is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    onlineMessageboardActivity is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with onlineMessageboardActivity.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_periodic_point_process_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 77> locations_array__ =
  {" (found before start of program)",
  " (in 'periodic_point_process', line 135, column 2 to column 25)",
  " (in 'periodic_point_process', line 136, column 2 to column 20)",
  " (in 'periodic_point_process', line 149, column 2 to column 14)",
  " (in 'periodic_point_process', line 150, column 2 to column 18)",
  " (in 'periodic_point_process', line 151, column 2 to column 14)",
  " (in 'periodic_point_process', line 153, column 4 to column 51)",
  " (in 'periodic_point_process', line 154, column 4 to column 51)",
  " (in 'periodic_point_process', line 152, column 17 to line 155, column 3)",
  " (in 'periodic_point_process', line 152, column 2 to line 155, column 3)",
  " (in 'periodic_point_process', line 156, column 2 to line 158, column 4)",
  " (in 'periodic_point_process', line 141, column 2 to line 143, column 4)",
  " (in 'periodic_point_process', line 145, column 2 to column 50)",
  " (in 'periodic_point_process', line 127, column 2 to column 17)",
  " (in 'periodic_point_process', line 128, column 2 to column 17)",
  " (in 'periodic_point_process', line 129, column 9 to column 10)",
  " (in 'periodic_point_process', line 129, column 2 to column 18)",
  " (in 'periodic_point_process', line 130, column 9 to column 10)",
  " (in 'periodic_point_process', line 130, column 2 to column 14)",
  " (in 'periodic_point_process', line 131, column 2 to column 11)",
  " (in 'periodic_point_process', line 136, column 9 to column 12)",
  " (in 'periodic_point_process', line 149, column 9 to column 10)",
  " (in 'periodic_point_process', line 150, column 9 to column 10)",
  " (in 'periodic_point_process', line 16, column 11 to column 12)",
  " (in 'periodic_point_process', line 16, column 14 to column 17)",
  " (in 'periodic_point_process', line 16, column 4 to column 21)",
  " (in 'periodic_point_process', line 18, column 6 to column 41)",
  " (in 'periodic_point_process', line 19, column 6 to column 35)",
  " (in 'periodic_point_process', line 17, column 19 to line 20, column 5)",
  " (in 'periodic_point_process', line 17, column 4 to line 20, column 5)",
  " (in 'periodic_point_process', line 21, column 4 to column 13)",
  " (in 'periodic_point_process', line 10, column 3 to line 22, column 3)",
  " (in 'periodic_point_process', line 34, column 11 to column 12)",
  " (in 'periodic_point_process', line 34, column 14 to column 17)",
  " (in 'periodic_point_process', line 34, column 4 to column 56)",
  " (in 'periodic_point_process', line 35, column 11 to column 12)",
  " (in 'periodic_point_process', line 35, column 4 to column 28)",
  " (in 'periodic_point_process', line 36, column 4 to column 14)",
  " (in 'periodic_point_process', line 27, column 3 to line 37, column 3)",
  " (in 'periodic_point_process', line 52, column 11 to column 12)",
  " (in 'periodic_point_process', line 52, column 14 to column 17)",
  " (in 'periodic_point_process', line 52, column 4 to column 21)",
  " (in 'periodic_point_process', line 55, column 8 to column 77)",
  " (in 'periodic_point_process', line 56, column 8 to column 73)",
  " (in 'periodic_point_process', line 54, column 20 to line 57, column 7)",
  " (in 'periodic_point_process', line 54, column 6 to line 57, column 7)",
  " (in 'periodic_point_process', line 53, column 19 to line 58, column 5)",
  " (in 'periodic_point_process', line 53, column 4 to line 58, column 5)",
  " (in 'periodic_point_process', line 59, column 4 to column 13)",
  " (in 'periodic_point_process', line 44, column 3 to line 60, column 3)",
  " (in 'periodic_point_process', line 77, column 14 to column 17)",
  " (in 'periodic_point_process', line 77, column 4 to line 79, column 8)",
  " (in 'periodic_point_process', line 80, column 4 to column 28)",
  " (in 'periodic_point_process', line 81, column 4 to column 19)",
  " (in 'periodic_point_process', line 82, column 4 to column 15)",
  " (in 'periodic_point_process', line 69, column 3 to line 83, column 3)",
  " (in 'periodic_point_process', line 101, column 4 to column 32)",
  " (in 'periodic_point_process', line 102, column 4 to column 28)",
  " (in 'periodic_point_process', line 103, column 11 to column 12)",
  " (in 'periodic_point_process', line 103, column 4 to column 33)",
  " (in 'periodic_point_process', line 104, column 11 to column 12)",
  " (in 'periodic_point_process', line 104, column 4 to column 37)",
  " (in 'periodic_point_process', line 105, column 4 to column 21)",
  " (in 'periodic_point_process', line 106, column 4 to column 16)",
  " (in 'periodic_point_process', line 108, column 4 to column 42)",
  " (in 'periodic_point_process', line 110, column 4 to line 111, column 55)",
  " (in 'periodic_point_process', line 109, column 15 to line 112, column 5)",
  " (in 'periodic_point_process', line 109, column 4 to line 112, column 5)",
  " (in 'periodic_point_process', line 113, column 4 to column 84)",
  " (in 'periodic_point_process', line 115, column 4 to column 26)",
  " (in 'periodic_point_process', line 117, column 6 to column 57)",
  " (in 'periodic_point_process', line 116, column 15 to line 118, column 5)",
  " (in 'periodic_point_process', line 116, column 4 to line 118, column 5)",
  " (in 'periodic_point_process', line 119, column 4 to column 41)",
  " (in 'periodic_point_process', line 121, column 4 to column 55)",
  " (in 'periodic_point_process', line 122, column 4 to column 18)",
  " (in 'periodic_point_process', line 93, column 3 to line 123, column 3)"};
template <typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,-1>
sinusoidal_basis(const int& K, const int& N, const T2__& t_arg__, const T3__&
                 omega_arg__, std::ostream* pstream__);
template <typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
sinusoidal_additive_model(const int& K, const int& N, const T2__&
                          alpha_arg__, const T3__& t_arg__, const T4__&
                          omega_arg__, std::ostream* pstream__);
template <typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T2__, T3__, stan::base_type_t<T4__>>,-1,-1>
sam_integral_basis(const int& K, const int& N, const T2__& a, const T3__& b,
                   const T4__& omega_arg__, std::ostream* pstream__);
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T1__>, stan::base_type_t<T2__>, T3__,
  T4__>
sam_integral(const int& K, const T1__& omega_arg__, const T2__& alpha_arg__,
             const T3__& a, const T4__& b, std::ostream* pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__,
  stan::base_type_t<T4__>, stan::promote_args_t<stan::base_type_t<T5__>>>
periodic_poisson_process_lpdf(const T0__& t_arg__, const T1__& lambda_0,
                              const T2__& a, const T3__& b, const T4__&
                              omega_arg__, const T5__& alpha_arg__,
                              std::ostream* pstream__);
template <typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,-1>
sinusoidal_basis(const int& K, const int& N, const T2__& t_arg__, const T3__&
                 omega_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& t = stan::math::to_ref(t_arg__);
  const auto& omega = stan::math::to_ref(omega_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 23;
    stan::math::validate_non_negative_index("X", "N", N);
    current_statement__ = 24;
    stan::math::validate_non_negative_index("X", "2 * K", (2 * K));
    Eigen::Matrix<local_scalar_t__,-1,-1> X =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, (2 * K),
        DUMMY_VAR__);
    current_statement__ = 29;
    for (int j = 1; j <= K; ++j) {
      current_statement__ = 26;
      stan::model::assign(X,
        stan::math::sin(
          stan::math::multiply(
            stan::model::rvalue(omega, "omega", stan::model::index_uni(j)), t)),
        "assigning variable X", stan::model::index_omni(),
        stan::model::index_uni(((2 * j) - 1)));
      current_statement__ = 27;
      stan::model::assign(X,
        stan::math::cos(
          stan::math::multiply(
            stan::model::rvalue(omega, "omega", stan::model::index_uni(j)), t)),
        "assigning variable X", stan::model::index_omni(),
        stan::model::index_uni((2 * j)));
    }
    current_statement__ = 30;
    return X;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
sinusoidal_additive_model(const int& K, const int& N, const T2__&
                          alpha_arg__, const T3__& t_arg__, const T4__&
                          omega_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& t = stan::math::to_ref(t_arg__);
  const auto& omega = stan::math::to_ref(omega_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 32;
    stan::math::validate_non_negative_index("X", "N", N);
    current_statement__ = 33;
    stan::math::validate_non_negative_index("X", "2 * K", (2 * K));
    Eigen::Matrix<local_scalar_t__,-1,-1> X =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, (2 * K),
        DUMMY_VAR__);
    current_statement__ = 34;
    stan::model::assign(X, sinusoidal_basis(K, N, t, omega, pstream__),
      "assigning variable X");
    current_statement__ = 35;
    stan::math::validate_non_negative_index("f", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> f =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 36;
    stan::model::assign(f, stan::math::multiply(X, alpha),
      "assigning variable f");
    current_statement__ = 37;
    return f;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<T2__, T3__, stan::base_type_t<T4__>>,-1,-1>
sam_integral_basis(const int& K, const int& N, const T2__& a, const T3__& b,
                   const T4__& omega_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__, T3__,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& omega = stan::math::to_ref(omega_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 39;
    stan::math::validate_non_negative_index("S", "N", N);
    current_statement__ = 40;
    stan::math::validate_non_negative_index("S", "2 * K", (2 * K));
    Eigen::Matrix<local_scalar_t__,-1,-1> S =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, (2 * K),
        DUMMY_VAR__);
    current_statement__ = 47;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 45;
      for (int j = 1; j <= K; ++j) {
        current_statement__ = 42;
        stan::model::assign(S,
          ((stan::math::cos(
              (stan::model::rvalue(omega, "omega", stan::model::index_uni(j))
              * a)) -
          stan::math::cos(
            (stan::model::rvalue(omega, "omega", stan::model::index_uni(j)) *
            b))) /
          stan::model::rvalue(omega, "omega", stan::model::index_uni(j))),
          "assigning variable S", stan::model::index_uni(i),
          stan::model::index_uni(((2 * j) - 1)));
        current_statement__ = 43;
        stan::model::assign(S,
          ((stan::math::sin(
              (stan::model::rvalue(omega, "omega", stan::model::index_uni(j))
              * b)) -
          stan::math::sin(
            (stan::model::rvalue(omega, "omega", stan::model::index_uni(j)) *
            a))) /
          stan::model::rvalue(omega, "omega", stan::model::index_uni(j))),
          "assigning variable S", stan::model::index_uni(i),
          stan::model::index_uni((2 * j)));
      }
    }
    current_statement__ = 48;
    return S;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T1__, typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
stan::promote_args_t<stan::base_type_t<T1__>, stan::base_type_t<T2__>, T3__,
  T4__>
sam_integral(const int& K, const T1__& omega_arg__, const T2__& alpha_arg__,
             const T3__& a, const T4__& b, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>, T3__, T4__>;
  int current_statement__ = 0;
  const auto& omega = stan::math::to_ref(omega_arg__);
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 50;
    stan::math::validate_non_negative_index("S", "2 * K", (2 * K));
    Eigen::Matrix<local_scalar_t__,-1,-1> S =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(1, (2 * K),
        DUMMY_VAR__);
    current_statement__ = 51;
    stan::model::assign(S, sam_integral_basis(K, 1, a, b, omega, pstream__),
      "assigning variable S");
    Eigen::Matrix<local_scalar_t__,-1,1> G =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(1, DUMMY_VAR__);
    current_statement__ = 52;
    stan::model::assign(G, stan::math::multiply(S, alpha),
      "assigning variable G");
    local_scalar_t__ G1 = DUMMY_VAR__;
    current_statement__ = 53;
    G1 = stan::model::rvalue(G, "G", stan::model::index_uni(1));
    current_statement__ = 54;
    return G1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__,
  stan::base_type_t<T4__>, stan::promote_args_t<stan::base_type_t<T5__>>>
periodic_poisson_process_lpdf(const T0__& t_arg__, const T1__& lambda_0,
                              const T2__& a, const T3__& b, const T4__&
                              omega_arg__, const T5__& alpha_arg__,
                              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, T2__, T3__, stan::base_type_t<T4__>,
                             stan::promote_args_t<stan::base_type_t<T5__>>>;
  int current_statement__ = 0;
  const auto& t = stan::math::to_ref(t_arg__);
  const auto& omega = stan::math::to_ref(omega_arg__);
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int K = std::numeric_limits<int>::min();
    current_statement__ = 56;
    K = stan::math::num_elements(omega);
    int N = std::numeric_limits<int>::min();
    current_statement__ = 57;
    N = stan::math::num_elements(t);
    current_statement__ = 58;
    stan::math::validate_non_negative_index("periodic_intensity", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> periodic_intensity =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 60;
    stan::math::validate_non_negative_index("log_periodic_intensity", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> log_periodic_intensity =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    local_scalar_t__ compensator = DUMMY_VAR__;
    local_scalar_t__ loglik = DUMMY_VAR__;
    current_statement__ = 64;
    stan::model::assign(periodic_intensity, stan::math::rep_vector(1, N),
      "assigning variable periodic_intensity");
    current_statement__ = 67;
    if (stan::math::logical_gt(K, 0)) {
      current_statement__ = 65;
      stan::model::assign(periodic_intensity,
        stan::math::add(stan::model::deep_copy(periodic_intensity),
          sinusoidal_additive_model(K, N, alpha, t, omega, pstream__)),
        "assigning variable periodic_intensity");
    }
    current_statement__ = 68;
    stan::model::assign(log_periodic_intensity,
      stan::math::add(stan::math::rep_vector(stan::math::log(lambda_0), N),
        stan::math::log(periodic_intensity)),
      "assigning variable log_periodic_intensity");
    current_statement__ = 69;
    compensator = (b - a);
    current_statement__ = 72;
    if (stan::math::logical_gt(K, 0)) {
      current_statement__ = 70;
      compensator = (compensator +
        sam_integral(K, omega, alpha, a, b, pstream__));
    }
    current_statement__ = 73;
    compensator = (lambda_0 * compensator);
    current_statement__ = 74;
    loglik = (stan::math::sum(log_periodic_intensity) - compensator);
    current_statement__ = 75;
    return loglik;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_periodic_point_process final : public model_base_crtp<model_periodic_point_process> {
private:
  int N;
  int K;
  Eigen::Matrix<double,-1,1> omega_data__;
  Eigen::Matrix<double,-1,1> t_data__;
  double a_0;
  int alpha_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> omega{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> t{nullptr, 0};
public:
  ~model_periodic_point_process() {}
  model_periodic_point_process(stan::io::var_context& context__, unsigned int
                               random_seed__ = 0, std::ostream*
                               pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_periodic_point_process_namespace::model_periodic_point_process";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 13;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 14;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 14;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 15;
      stan::math::validate_non_negative_index("omega", "K", K);
      current_statement__ = 16;
      context__.validate_dims("data initialization", "omega", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      omega_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                       std::numeric_limits<double>::quiet_NaN());
      new (&omega)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(omega_data__.data(), K);
      {
        std::vector<local_scalar_t__> omega_flat__;
        current_statement__ = 16;
        omega_flat__ = context__.vals_r("omega");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 16;
          stan::model::assign(omega, omega_flat__[(pos__ - 1)],
            "assigning variable omega", stan::model::index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 17;
      stan::math::validate_non_negative_index("t", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "t", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      t_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&t) Eigen::Map<Eigen::Matrix<double,-1,1>>(t_data__.data(), N);
      {
        std::vector<local_scalar_t__> t_flat__;
        current_statement__ = 18;
        t_flat__ = context__.vals_r("t");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          stan::model::assign(t, t_flat__[(pos__ - 1)],
            "assigning variable t", stan::model::index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      context__.validate_dims("data initialization", "a_0", "double",
        std::vector<size_t>{});
      a_0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 19;
      a_0 = context__.vals_r("a_0")[(1 - 1)];
      current_statement__ = 20;
      alpha_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 20;
      alpha_1dim__ = (2 * K);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("alpha", "2 * K", alpha_1dim__);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("A", "K", K);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("phase", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + alpha_1dim__;
  }
  inline std::string model_name() const final {
    return "model_periodic_point_process";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_periodic_point_process_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ lambda_0 = DUMMY_VAR__;
      current_statement__ = 1;
      lambda_0 = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_1dim__);
      {
        current_statement__ = 11;
        lp_accum__.add(periodic_poisson_process_lpdf<false>(t, lambda_0,
                         static_cast<double>(0), a_0, omega, alpha, pstream__));
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<false>(alpha, 0, (1 /
                         stan::math::sqrt((2 * K)))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_periodic_point_process_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double lambda_0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      lambda_0 = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(alpha_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_1dim__);
      out__.write(lambda_0);
      out__.write(alpha);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> A =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> phase =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      double loglik = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      for (int i = 1; i <= K; ++i) {
        current_statement__ = 6;
        stan::model::assign(A,
          stan::math::sqrt(
            (stan::math::pow(
               stan::model::rvalue(alpha, "alpha",
                 stan::model::index_uni(((2 * i) - 1))), 2) +
            stan::math::pow(
              stan::model::rvalue(alpha, "alpha",
                stan::model::index_uni((2 * i))), 2))),
          "assigning variable A", stan::model::index_uni(i));
        current_statement__ = 7;
        stan::model::assign(phase,
          stan::math::atan2(
            stan::model::rvalue(alpha, "alpha",
              stan::model::index_uni((2 * i))),
            stan::model::rvalue(alpha, "alpha",
              stan::model::index_uni(((2 * i) - 1)))),
          "assigning variable phase", stan::model::index_uni(i));
      }
      current_statement__ = 10;
      loglik = periodic_poisson_process_lpdf<false>(t, lambda_0,
                 static_cast<double>(0), a_0, omega, alpha, pstream__);
      out__.write(A);
      out__.write(phase);
      out__.write(loglik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ lambda_0 = DUMMY_VAR__;
      current_statement__ = 1;
      lambda_0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, lambda_0);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_1dim__),
        "assigning variable alpha");
      out__.write(alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "lambda_0",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(alpha_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ lambda_0 = DUMMY_VAR__;
      current_statement__ = 1;
      lambda_0 = context__.vals_r("lambda_0")[(1 - 1)];
      out__.write_free_lb(0, lambda_0);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 2;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"lambda_0", "alpha"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"A", "phase", "loglik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(alpha_1dim__)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "lambda_0");
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "phase" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "loglik");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "lambda_0");
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "phase" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "loglik");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"lambda_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"phase\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"lambda_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"phase\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (1 + alpha_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((K + K) +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (1 + alpha_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (((K + K) +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_periodic_point_process_namespace::model_periodic_point_process;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_periodic_point_process_namespace::profiles__;
}
#endif
#endif
