// Generated by rstantools.  Do not edit by hand.

/*
    onlineMessageboardActivity is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    onlineMessageboardActivity is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with onlineMessageboardActivity.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_branching_point_process_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 166> locations_array__ =
  {" (found before start of program)",
  " (in 'branching_point_process', line 218, column 2 to column 24)",
  " (in 'branching_point_process', line 219, column 2 to column 27)",
  " (in 'branching_point_process', line 220, column 2 to column 25)",
  " (in 'branching_point_process', line 221, column 2 to column 20)",
  " (in 'branching_point_process', line 225, column 2 to column 25)",
  " (in 'branching_point_process', line 257, column 2 to column 14)",
  " (in 'branching_point_process', line 258, column 2 to column 18)",
  " (in 'branching_point_process', line 227, column 4 to column 33)",
  " (in 'branching_point_process', line 226, column 17 to line 228, column 3)",
  " (in 'branching_point_process', line 226, column 2 to line 228, column 3)",
  " (in 'branching_point_process', line 230, column 4 to column 41)",
  " (in 'branching_point_process', line 229, column 24 to line 231, column 3)",
  " (in 'branching_point_process', line 229, column 2 to line 231, column 3)",
  " (in 'branching_point_process', line 260, column 4 to column 51)",
  " (in 'branching_point_process', line 261, column 4 to column 51)",
  " (in 'branching_point_process', line 259, column 17 to line 262, column 3)",
  " (in 'branching_point_process', line 259, column 2 to line 262, column 3)",
  " (in 'branching_point_process', line 237, column 4 to line 247, column 6)",
  " (in 'branching_point_process', line 236, column 17 to line 248, column 3)",
  " (in 'branching_point_process', line 236, column 2 to line 248, column 3)",
  " (in 'branching_point_process', line 250, column 2 to column 47)",
  " (in 'branching_point_process', line 251, column 2 to column 40)",
  " (in 'branching_point_process', line 252, column 2 to column 50)",
  " (in 'branching_point_process', line 253, column 2 to column 50)",
  " (in 'branching_point_process', line 171, column 2 to column 17)",
  " (in 'branching_point_process', line 172, column 2 to column 17)",
  " (in 'branching_point_process', line 173, column 2 to column 17)",
  " (in 'branching_point_process', line 174, column 2 to column 17)",
  " (in 'branching_point_process', line 175, column 18 to column 19)",
  " (in 'branching_point_process', line 175, column 2 to column 23)",
  " (in 'branching_point_process', line 176, column 9 to column 10)",
  " (in 'branching_point_process', line 176, column 2 to column 18)",
  " (in 'branching_point_process', line 177, column 9 to column 10)",
  " (in 'branching_point_process', line 177, column 2 to column 14)",
  " (in 'branching_point_process', line 178, column 11 to column 12)",
  " (in 'branching_point_process', line 178, column 2 to column 14)",
  " (in 'branching_point_process', line 179, column 10 to column 11)",
  " (in 'branching_point_process', line 179, column 2 to column 13)",
  " (in 'branching_point_process', line 180, column 29 to column 30)",
  " (in 'branching_point_process', line 180, column 2 to column 32)",
  " (in 'branching_point_process', line 181, column 34 to column 35)",
  " (in 'branching_point_process', line 181, column 2 to column 37)",
  " (in 'branching_point_process', line 182, column 2 to column 26)",
  " (in 'branching_point_process', line 183, column 2 to column 25)",
  " (in 'branching_point_process', line 184, column 2 to column 25)",
  " (in 'branching_point_process', line 185, column 2 to column 24)",
  " (in 'branching_point_process', line 189, column 2 to column 32)",
  " (in 'branching_point_process', line 190, column 2 to column 12)",
  " (in 'branching_point_process', line 191, column 10 to column 11)",
  " (in 'branching_point_process', line 191, column 2 to column 13)",
  " (in 'branching_point_process', line 192, column 17 to column 18)",
  " (in 'branching_point_process', line 192, column 2 to column 20)",
  " (in 'branching_point_process', line 193, column 17 to column 25)",
  " (in 'branching_point_process', line 193, column 2 to column 27)",
  " (in 'branching_point_process', line 194, column 32 to column 33)",
  " (in 'branching_point_process', line 194, column 2 to column 35)",
  " (in 'branching_point_process', line 196, column 2 to column 13)",
  " (in 'branching_point_process', line 198, column 4 to column 33)",
  " (in 'branching_point_process', line 197, column 17 to line 199, column 3)",
  " (in 'branching_point_process', line 197, column 2 to line 199, column 3)",
  " (in 'branching_point_process', line 202, column 4 to column 93)",
  " (in 'branching_point_process', line 201, column 17 to line 203, column 3)",
  " (in 'branching_point_process', line 201, column 2 to line 203, column 3)",
  " (in 'branching_point_process', line 207, column 6 to column 24)",
  " (in 'branching_point_process', line 208, column 6 to column 13)",
  " (in 'branching_point_process', line 206, column 27 to line 209, column 5)",
  " (in 'branching_point_process', line 206, column 4 to line 209, column 5)",
  " (in 'branching_point_process', line 205, column 17 to line 210, column 3)",
  " (in 'branching_point_process', line 205, column 2 to line 210, column 3)",
  " (in 'branching_point_process', line 213, column 4 to column 41)",
  " (in 'branching_point_process', line 212, column 17 to line 214, column 3)",
  " (in 'branching_point_process', line 212, column 2 to line 214, column 3)",
  " (in 'branching_point_process', line 218, column 18 to column 19)",
  " (in 'branching_point_process', line 219, column 9 to column 17)",
  " (in 'branching_point_process', line 220, column 18 to column 19)",
  " (in 'branching_point_process', line 221, column 9 to column 12)",
  " (in 'branching_point_process', line 225, column 18 to column 19)",
  " (in 'branching_point_process', line 257, column 9 to column 10)",
  " (in 'branching_point_process', line 258, column 9 to column 10)",
  " (in 'branching_point_process', line 10, column 10 to column 11)",
  " (in 'branching_point_process', line 10, column 4 to column 13)",
  " (in 'branching_point_process', line 12, column 6 to column 15)",
  " (in 'branching_point_process', line 14, column 8 to column 29)",
  " (in 'branching_point_process', line 13, column 21 to line 15, column 7)",
  " (in 'branching_point_process', line 13, column 6 to line 15, column 7)",
  " (in 'branching_point_process', line 11, column 19 to line 16, column 5)",
  " (in 'branching_point_process', line 11, column 4 to line 16, column 5)",
  " (in 'branching_point_process', line 17, column 4 to column 13)",
  " (in 'branching_point_process', line 9, column 3 to line 18, column 3)",
  " (in 'branching_point_process', line 29, column 11 to column 12)",
  " (in 'branching_point_process', line 29, column 14 to column 17)",
  " (in 'branching_point_process', line 29, column 4 to column 21)",
  " (in 'branching_point_process', line 31, column 6 to column 41)",
  " (in 'branching_point_process', line 32, column 6 to column 35)",
  " (in 'branching_point_process', line 30, column 19 to line 33, column 5)",
  " (in 'branching_point_process', line 30, column 4 to line 33, column 5)",
  " (in 'branching_point_process', line 34, column 4 to column 13)",
  " (in 'branching_point_process', line 23, column 3 to line 35, column 3)",
  " (in 'branching_point_process', line 47, column 11 to column 12)",
  " (in 'branching_point_process', line 47, column 14 to column 17)",
  " (in 'branching_point_process', line 47, column 4 to column 56)",
  " (in 'branching_point_process', line 48, column 11 to column 12)",
  " (in 'branching_point_process', line 48, column 4 to column 28)",
  " (in 'branching_point_process', line 49, column 4 to column 14)",
  " (in 'branching_point_process', line 40, column 3 to line 50, column 3)",
  " (in 'branching_point_process', line 66, column 11 to column 12)",
  " (in 'branching_point_process', line 66, column 14 to column 17)",
  " (in 'branching_point_process', line 66, column 4 to column 21)",
  " (in 'branching_point_process', line 69, column 8 to line 72, column 10)",
  " (in 'branching_point_process', line 73, column 8 to line 76, column 10)",
  " (in 'branching_point_process', line 68, column 20 to line 77, column 7)",
  " (in 'branching_point_process', line 68, column 6 to line 77, column 7)",
  " (in 'branching_point_process', line 67, column 19 to line 78, column 5)",
  " (in 'branching_point_process', line 67, column 4 to line 78, column 5)",
  " (in 'branching_point_process', line 79, column 4 to column 13)",
  " (in 'branching_point_process', line 58, column 3 to line 80, column 3)",
  " (in 'branching_point_process', line 97, column 11 to column 12)",
  " (in 'branching_point_process', line 97, column 14 to column 17)",
  " (in 'branching_point_process', line 97, column 4 to line 99, column 8)",
  " (in 'branching_point_process', line 100, column 11 to column 12)",
  " (in 'branching_point_process', line 100, column 4 to column 28)",
  " (in 'branching_point_process', line 101, column 4 to column 14)",
  " (in 'branching_point_process', line 88, column 3 to line 102, column 3)",
  " (in 'branching_point_process', line 128, column 4 to column 32)",
  " (in 'branching_point_process', line 129, column 4 to column 28)",
  " (in 'branching_point_process', line 130, column 11 to column 14)",
  " (in 'branching_point_process', line 130, column 4 to column 26)",
  " (in 'branching_point_process', line 131, column 11 to column 14)",
  " (in 'branching_point_process', line 131, column 4 to column 28)",
  " (in 'branching_point_process', line 132, column 11 to column 14)",
  " (in 'branching_point_process', line 132, column 4 to column 22)",
  " (in 'branching_point_process', line 133, column 11 to column 12)",
  " (in 'branching_point_process', line 133, column 4 to column 21)",
  " (in 'branching_point_process', line 134, column 11 to column 12)",
  " (in 'branching_point_process', line 134, column 4 to column 21)",
  " (in 'branching_point_process', line 135, column 11 to column 12)",
  " (in 'branching_point_process', line 135, column 4 to column 20)",
  " (in 'branching_point_process', line 136, column 11 to column 12)",
  " (in 'branching_point_process', line 136, column 4 to column 21)",
  " (in 'branching_point_process', line 137, column 4 to column 12)",
  " (in 'branching_point_process', line 139, column 4 to column 35)",
  " (in 'branching_point_process', line 141, column 4 to line 143, column 6)",
  " (in 'branching_point_process', line 140, column 28 to line 144, column 5)",
  " (in 'branching_point_process', line 140, column 4 to line 144, column 5)",
  " (in 'branching_point_process', line 145, column 4 to column 33)",
  " (in 'branching_point_process', line 146, column 19 to column 83)",
  " (in 'branching_point_process', line 146, column 4 to column 83)",
  " (in 'branching_point_process', line 148, column 19 to column 65)",
  " (in 'branching_point_process', line 148, column 4 to column 65)",
  " (in 'branching_point_process', line 150, column 6 to line 152, column 8)",
  " (in 'branching_point_process', line 149, column 15 to line 153, column 5)",
  " (in 'branching_point_process', line 149, column 4 to line 153, column 5)",
  " (in 'branching_point_process', line 156, column 6 to column 35)",
  " (in 'branching_point_process', line 161, column 8 to column 22)",
  " (in 'branching_point_process', line 162, column 8 to column 40)",
  " (in 'branching_point_process', line 160, column 13 to line 163, column 7)",
  " (in 'branching_point_process', line 158, column 8 to column 100)",
  " (in 'branching_point_process', line 159, column 8 to column 65)",
  " (in 'branching_point_process', line 157, column 27 to line 160, column 7)",
  " (in 'branching_point_process', line 157, column 6 to line 163, column 7)",
  " (in 'branching_point_process', line 155, column 18 to line 164, column 5)",
  " (in 'branching_point_process', line 155, column 4 to line 164, column 5)",
  " (in 'branching_point_process', line 165, column 4 to column 65)",
  " (in 'branching_point_process', line 166, column 4 to column 14)",
  " (in 'branching_point_process', line 116, column 3 to line 167, column 3)"};
std::vector<int>
offspring_count(const int& N, const std::vector<int>& beta, std::ostream*
                pstream__);
template <typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,-1>
sinusoidal_basis(const int& K, const int& N, const T2__& t_arg__, const T3__&
                 omega_arg__, std::ostream* pstream__);
template <typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
sinusoidal_additive_model(const int& K, const int& N, const T2__&
                          alpha_arg__, const T3__& t_arg__, const T4__&
                          omega_arg__, std::ostream* pstream__);
template <typename T2__, typename T3__, typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>, T3__,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>>,-1,-1>
sam_exp_prod_integral_basis(const int& K, const int& N, const T2__& t_arg__,
                            const T3__& a, const T4__& omega_arg__,
                            const T5__& xi_arg__, std::ostream* pstream__);
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>>,-1,1>
sam_exp_prod_integral(const int& K, const int& N, const T2__& alpha_arg__,
                      const T3__& t_arg__, const T4__& a, const T5__&
                      omega_arg__, const T6__& xi_arg__, std::ostream*
                      pstream__);
template <bool propto__, typename T0__, typename T3__, typename T4__,
          typename T5__, typename T6__, typename T8__, typename T9__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, T3__, stan::base_type_t<T4__>,
  stan::base_type_t<T5__>, stan::base_type_t<T6__>,
  stan::promote_args_t<stan::base_type_t<T8__>, stan::base_type_t<T9__>>>
cluster_lpdf(const T0__& t_arg__, const std::vector<int>& beta,
             const std::vector<int>& z, const T3__& a, const T4__& mu_arg__,
             const T5__& psi_arg__, const T6__& eta_arg__,
             const std::vector<int>& inf_idx, const T8__& omega_arg__,
             const T9__& alpha_arg__, std::ostream* pstream__);
std::vector<int>
offspring_count(const int& N, const std::vector<int>& beta, std::ostream*
                pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 80;
    stan::math::validate_non_negative_index("z", "N", N);
    std::vector<int> z = std::vector<int>(N, std::numeric_limits<int>::min());
    current_statement__ = 87;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 82;
      stan::model::assign(z, 0, "assigning variable z",
        stan::model::index_uni(i));
      current_statement__ = 85;
      for (int j = 1; j <= N; ++j) {
        current_statement__ = 83;
        stan::model::assign(z,
          (stan::model::rvalue(z, "z", stan::model::index_uni(i)) +
          stan::math::logical_eq(
            stan::model::rvalue(beta, "beta", stan::model::index_uni(j)), i)),
          "assigning variable z", stan::model::index_uni(i));
      }
    }
    current_statement__ = 88;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,-1>
sinusoidal_basis(const int& K, const int& N, const T2__& t_arg__, const T3__&
                 omega_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& t = stan::math::to_ref(t_arg__);
  const auto& omega = stan::math::to_ref(omega_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 90;
    stan::math::validate_non_negative_index("X", "N", N);
    current_statement__ = 91;
    stan::math::validate_non_negative_index("X", "2 * K", (2 * K));
    Eigen::Matrix<local_scalar_t__,-1,-1> X =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, (2 * K),
        DUMMY_VAR__);
    current_statement__ = 96;
    for (int j = 1; j <= K; ++j) {
      current_statement__ = 93;
      stan::model::assign(X,
        stan::math::sin(
          stan::math::multiply(
            stan::model::rvalue(omega, "omega", stan::model::index_uni(j)), t)),
        "assigning variable X", stan::model::index_omni(),
        stan::model::index_uni(((2 * j) - 1)));
      current_statement__ = 94;
      stan::model::assign(X,
        stan::math::cos(
          stan::math::multiply(
            stan::model::rvalue(omega, "omega", stan::model::index_uni(j)), t)),
        "assigning variable X", stan::model::index_omni(),
        stan::model::index_uni((2 * j)));
    }
    current_statement__ = 97;
    return X;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__, typename T4__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
sinusoidal_additive_model(const int& K, const int& N, const T2__&
                          alpha_arg__, const T3__& t_arg__, const T4__&
                          omega_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& t = stan::math::to_ref(t_arg__);
  const auto& omega = stan::math::to_ref(omega_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 99;
    stan::math::validate_non_negative_index("X", "N", N);
    current_statement__ = 100;
    stan::math::validate_non_negative_index("X", "2 * K", (2 * K));
    Eigen::Matrix<local_scalar_t__,-1,-1> X =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, (2 * K),
        DUMMY_VAR__);
    current_statement__ = 101;
    stan::model::assign(X, sinusoidal_basis(K, N, t, omega, pstream__),
      "assigning variable X");
    current_statement__ = 102;
    stan::math::validate_non_negative_index("f", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> f =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 103;
    stan::model::assign(f, stan::math::multiply(X, alpha),
      "assigning variable f");
    current_statement__ = 104;
    return f;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__, typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>, T3__,
                stan::base_type_t<T4__>, stan::base_type_t<T5__>>,-1,-1>
sam_exp_prod_integral_basis(const int& K, const int& N, const T2__& t_arg__,
                            const T3__& a, const T4__& omega_arg__,
                            const T5__& xi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             T3__, stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>>;
  int current_statement__ = 0;
  const auto& t = stan::math::to_ref(t_arg__);
  const auto& omega = stan::math::to_ref(omega_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 106;
    stan::math::validate_non_negative_index("W", "N", N);
    current_statement__ = 107;
    stan::math::validate_non_negative_index("W", "2 * K", (2 * K));
    Eigen::Matrix<local_scalar_t__,-1,-1> W =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, (2 * K),
        DUMMY_VAR__);
    current_statement__ = 114;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 112;
      for (int j = 1; j <= K; ++j) {
        current_statement__ = 109;
        stan::model::assign(W,
          ((stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) /
          (stan::math::pow(
             stan::model::rvalue(xi, "xi", stan::model::index_uni(i)), 2) +
          stan::math::pow(
            stan::model::rvalue(omega, "omega", stan::model::index_uni(j)), 2)))
          * ((stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) *
          (stan::math::sin(
             (stan::model::rvalue(omega, "omega", stan::model::index_uni(j))
             * stan::model::rvalue(t, "t", stan::model::index_uni(i)))) -
          (stan::math::sin(
             (stan::model::rvalue(omega, "omega", stan::model::index_uni(j))
             * a)) *
          stan::math::exp(
            (-stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) * (a -
            stan::model::rvalue(t, "t", stan::model::index_uni(i)))))))) +
          (stan::model::rvalue(omega, "omega", stan::model::index_uni(j)) *
          (stan::math::cos(
             (stan::model::rvalue(omega, "omega", stan::model::index_uni(j))
             * stan::model::rvalue(t, "t", stan::model::index_uni(i)))) -
          (stan::math::cos(
             (stan::model::rvalue(omega, "omega", stan::model::index_uni(j))
             * a)) *
          stan::math::exp(
            (-stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) * (a -
            stan::model::rvalue(t, "t", stan::model::index_uni(i)))))))))),
          "assigning variable W", stan::model::index_uni(i),
          stan::model::index_uni(((2 * j) - 1)));
        current_statement__ = 110;
        stan::model::assign(W,
          ((stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) /
          (stan::math::pow(
             stan::model::rvalue(xi, "xi", stan::model::index_uni(i)), 2) +
          stan::math::pow(
            stan::model::rvalue(omega, "omega", stan::model::index_uni(j)), 2)))
          * ((stan::model::rvalue(omega, "omega", stan::model::index_uni(j))
          *
          ((stan::math::sin(
              (stan::model::rvalue(omega, "omega", stan::model::index_uni(j))
              * a)) *
          stan::math::exp(
            (-stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) * (a -
            stan::model::rvalue(t, "t", stan::model::index_uni(i)))))) -
          stan::math::sin(
            (stan::model::rvalue(omega, "omega", stan::model::index_uni(j)) *
            stan::model::rvalue(t, "t", stan::model::index_uni(i)))))) -
          (stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) *
          ((stan::math::cos(
              (stan::model::rvalue(omega, "omega", stan::model::index_uni(j))
              * a)) *
          stan::math::exp(
            (-stan::model::rvalue(xi, "xi", stan::model::index_uni(i)) * (a -
            stan::model::rvalue(t, "t", stan::model::index_uni(i)))))) -
          stan::math::cos(
            (stan::model::rvalue(omega, "omega", stan::model::index_uni(j)) *
            stan::model::rvalue(t, "t", stan::model::index_uni(i)))))))),
          "assigning variable W", stan::model::index_uni(i),
          stan::model::index_uni((2 * j)));
      }
    }
    current_statement__ = 115;
    return W;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__,
          stan::require_all_t<stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, T4__, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>>,-1,1>
sam_exp_prod_integral(const int& K, const int& N, const T2__& alpha_arg__,
                      const T3__& t_arg__, const T4__& a, const T5__&
                      omega_arg__, const T6__& xi_arg__, std::ostream*
                      pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>, T4__,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>>;
  int current_statement__ = 0;
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  const auto& t = stan::math::to_ref(t_arg__);
  const auto& omega = stan::math::to_ref(omega_arg__);
  const auto& xi = stan::math::to_ref(xi_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 117;
    stan::math::validate_non_negative_index("W", "N", N);
    current_statement__ = 118;
    stan::math::validate_non_negative_index("W", "2 * K", (2 * K));
    Eigen::Matrix<local_scalar_t__,-1,-1> W =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, (2 * K),
        DUMMY_VAR__);
    current_statement__ = 119;
    stan::model::assign(W,
      sam_exp_prod_integral_basis(K, N, t, a, omega, xi, pstream__),
      "assigning variable W");
    current_statement__ = 120;
    stan::math::validate_non_negative_index("F", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> F =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 121;
    stan::model::assign(F, stan::math::multiply(W, alpha),
      "assigning variable F");
    current_statement__ = 122;
    return F;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T3__, typename T4__,
          typename T5__, typename T6__, typename T8__, typename T9__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, T3__, stan::base_type_t<T4__>,
  stan::base_type_t<T5__>, stan::base_type_t<T6__>,
  stan::promote_args_t<stan::base_type_t<T8__>, stan::base_type_t<T9__>>>
cluster_lpdf(const T0__& t_arg__, const std::vector<int>& beta,
             const std::vector<int>& z, const T3__& a, const T4__& mu_arg__,
             const T5__& psi_arg__, const T6__& eta_arg__,
             const std::vector<int>& inf_idx, const T8__& omega_arg__,
             const T9__& alpha_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T3__, stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<stan::base_type_t<T8__>,
                               stan::base_type_t<T9__>>>;
  int current_statement__ = 0;
  const auto& t = stan::math::to_ref(t_arg__);
  const auto& mu = stan::math::to_ref(mu_arg__);
  const auto& psi = stan::math::to_ref(psi_arg__);
  const auto& eta = stan::math::to_ref(eta_arg__);
  const auto& omega = stan::math::to_ref(omega_arg__);
  const auto& alpha = stan::math::to_ref(alpha_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int K = std::numeric_limits<int>::min();
    current_statement__ = 124;
    K = stan::math::num_elements(omega);
    int N = std::numeric_limits<int>::min();
    current_statement__ = 125;
    N = stan::math::num_elements(t);
    current_statement__ = 126;
    stan::math::validate_non_negative_index("alpha_fun", "N - 1", (N - 1));
    Eigen::Matrix<local_scalar_t__,-1,1> alpha_fun =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((N - 1), DUMMY_VAR__);
    current_statement__ = 128;
    stan::math::validate_non_negative_index("l_alpha_fun", "N - 1", (N - 1));
    Eigen::Matrix<local_scalar_t__,-1,1> l_alpha_fun =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((N - 1), DUMMY_VAR__);
    current_statement__ = 130;
    stan::math::validate_non_negative_index("l_rho", "N - 1", (N - 1));
    Eigen::Matrix<local_scalar_t__,-1,1> l_rho =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((N - 1), DUMMY_VAR__);
    current_statement__ = 132;
    stan::math::validate_non_negative_index("C_rate", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> C_rate =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 134;
    stan::math::validate_non_negative_index("l_norm", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> l_norm =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 136;
    stan::math::validate_non_negative_index("l_off", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> l_off =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 138;
    stan::math::validate_non_negative_index("l_disp", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> l_disp =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    local_scalar_t__ ll = DUMMY_VAR__;
    current_statement__ = 141;
    stan::model::assign(alpha_fun, stan::math::rep_vector(1, (N - 1)),
      "assigning variable alpha_fun");
    current_statement__ = 144;
    if ((stan::math::primitive_value(stan::math::logical_gt(K, 0)) &&
        stan::math::primitive_value(stan::math::logical_gt(N, 1)))) {
      current_statement__ = 142;
      stan::model::assign(alpha_fun,
        stan::math::add(stan::model::deep_copy(alpha_fun),
          sinusoidal_additive_model(K, (N - 1), alpha,
            stan::model::rvalue(t, "t", stan::model::index_min_max(2, N)),
            omega, pstream__)), "assigning variable alpha_fun");
    }
    current_statement__ = 145;
    stan::model::assign(l_alpha_fun, stan::math::log(alpha_fun),
      "assigning variable l_alpha_fun");
    current_statement__ = 147;
    for (int i = 2; i <= N; ++i) {
      current_statement__ = 146;
      stan::model::assign(l_rho,
        stan::math::exponential_lpdf<false>(
          (stan::model::rvalue(t, "t", stan::model::index_uni(i)) -
          stan::model::rvalue(t, "t",
            stan::model::index_uni(
              stan::model::rvalue(beta, "beta", stan::model::index_uni(i))))),
          stan::model::rvalue(eta, "eta",
            stan::model::index_uni(
              stan::model::rvalue(beta, "beta", stan::model::index_uni(i))))),
        "assigning variable l_rho", stan::model::index_uni((i - 1)));
    }
    current_statement__ = 149;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 148;
      stan::model::assign(C_rate,
        stan::math::exponential_cdf((a -
          stan::model::rvalue(t, "t", stan::model::index_uni(i))),
          stan::model::rvalue(eta, "eta", stan::model::index_uni(i))),
        "assigning variable C_rate", stan::model::index_uni(i));
    }
    current_statement__ = 152;
    if (stan::math::logical_gt(K, 0)) {
      current_statement__ = 150;
      stan::model::assign(C_rate,
        stan::math::add(stan::model::deep_copy(C_rate),
          sam_exp_prod_integral(K, N, alpha, t, a, omega, eta, pstream__)),
        "assigning variable C_rate");
    }
    current_statement__ = 162;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 153;
      stan::model::assign(l_off,
        (stan::model::rvalue(z, "z", stan::model::index_uni(i)) *
        stan::math::log(
          stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))),
        "assigning variable l_off", stan::model::index_uni(i));
      current_statement__ = 160;
      if (stan::math::logical_eq(
            stan::model::rvalue(inf_idx, "inf_idx", stan::model::index_uni(i)),
            0)) {
        current_statement__ = 157;
        stan::model::assign(l_norm,
          ((stan::math::lgamma(
              (stan::model::rvalue(z, "z", stan::model::index_uni(i)) +
              stan::model::rvalue(psi, "psi", stan::model::index_uni(i)))) -
          stan::math::lgamma(
            stan::model::rvalue(psi, "psi", stan::model::index_uni(i)))) -
          (stan::model::rvalue(z, "z", stan::model::index_uni(i)) *
          stan::math::log(
            ((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
            stan::model::rvalue(C_rate, "C_rate", stan::model::index_uni(i)))
            + stan::model::rvalue(psi, "psi", stan::model::index_uni(i)))))),
          "assigning variable l_norm", stan::model::index_uni(i));
        current_statement__ = 158;
        stan::model::assign(l_disp,
          (-stan::model::rvalue(psi, "psi", stan::model::index_uni(i)) *
          stan::math::log1p(
            ((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
            stan::model::rvalue(C_rate, "C_rate", stan::model::index_uni(i)))
            / stan::model::rvalue(psi, "psi", stan::model::index_uni(i))))),
          "assigning variable l_disp", stan::model::index_uni(i));
      } else {
        current_statement__ = 154;
        stan::model::assign(l_norm, 0, "assigning variable l_norm",
          stan::model::index_uni(i));
        current_statement__ = 155;
        stan::model::assign(l_disp,
          (-stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
          stan::model::rvalue(C_rate, "C_rate", stan::model::index_uni(i))),
          "assigning variable l_disp", stan::model::index_uni(i));
      }
    }
    current_statement__ = 163;
    ll = (stan::math::sum(stan::math::add(l_alpha_fun, l_rho)) +
      stan::math::sum(stan::math::add(stan::math::add(l_norm, l_off), l_disp)));
    current_statement__ = 164;
    return ll;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_branching_point_process final : public model_base_crtp<model_branching_point_process> {
private:
  int N;
  int S;
  int K;
  int M;
  Eigen::Matrix<double,-1,1> a_data__;
  Eigen::Matrix<double,-1,1> omega_data__;
  Eigen::Matrix<double,-1,1> t_data__;
  std::vector<int> beta;
  std::vector<int> n_i;
  std::vector<int> type;
  std::vector<int> is_hetero;
  double alpha_eta;
  double beta_eta;
  double alpha_mu;
  double beta_mu;
  int M_hetero;
  int j;
  std::vector<int> pos;
  std::vector<int> z;
  std::vector<int> hetero_idx;
  std::vector<int> inf_idx;
  int alpha_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> a{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> omega{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> t{nullptr, 0};
public:
  ~model_branching_point_process() {}
  model_branching_point_process(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0, std::ostream*
                                pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_branching_point_process_namespace::model_branching_point_process";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 25;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 25;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 26;
      context__.validate_dims("data initialization", "S", "int",
        std::vector<size_t>{});
      S = std::numeric_limits<int>::min();
      current_statement__ = 26;
      S = context__.vals_i("S")[(1 - 1)];
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "S", S, 0);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 27;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 28;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("a", "S", S);
      current_statement__ = 30;
      context__.validate_dims("data initialization", "a", "double",
        std::vector<size_t>{static_cast<size_t>(S)});
      a_data__ = Eigen::Matrix<double,-1,1>::Constant(S,
                   std::numeric_limits<double>::quiet_NaN());
      new (&a) Eigen::Map<Eigen::Matrix<double,-1,1>>(a_data__.data(), S);
      {
        std::vector<local_scalar_t__> a_flat__;
        current_statement__ = 30;
        a_flat__ = context__.vals_r("a");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= S; ++sym1__) {
          current_statement__ = 30;
          stan::model::assign(a, a_flat__[(pos__ - 1)],
            "assigning variable a", stan::model::index_uni(sym1__));
          current_statement__ = 30;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "a", a, 0);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("omega", "K", K);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "omega", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      omega_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                       std::numeric_limits<double>::quiet_NaN());
      new (&omega)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(omega_data__.data(), K);
      {
        std::vector<local_scalar_t__> omega_flat__;
        current_statement__ = 32;
        omega_flat__ = context__.vals_r("omega");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 32;
          stan::model::assign(omega, omega_flat__[(pos__ - 1)],
            "assigning variable omega", stan::model::index_uni(sym1__));
          current_statement__ = 32;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 33;
      stan::math::validate_non_negative_index("t", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization", "t", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      t_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&t) Eigen::Map<Eigen::Matrix<double,-1,1>>(t_data__.data(), N);
      {
        std::vector<local_scalar_t__> t_flat__;
        current_statement__ = 34;
        t_flat__ = context__.vals_r("t");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 34;
          stan::model::assign(t, t_flat__[(pos__ - 1)],
            "assigning variable t", stan::model::index_uni(sym1__));
          current_statement__ = 34;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 35;
      stan::math::validate_non_negative_index("beta", "N", N);
      current_statement__ = 36;
      context__.validate_dims("data initialization", "beta", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      beta = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 36;
      beta = context__.vals_i("beta");
      current_statement__ = 37;
      stan::math::validate_non_negative_index("n_i", "S", S);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "n_i", "int",
        std::vector<size_t>{static_cast<size_t>(S)});
      n_i = std::vector<int>(S, std::numeric_limits<int>::min());
      current_statement__ = 38;
      n_i = context__.vals_i("n_i");
      current_statement__ = 39;
      stan::math::validate_non_negative_index("type", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "type", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      type = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 40;
      type = context__.vals_i("type");
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "type", type, 1);
      current_statement__ = 40;
      stan::math::check_less_or_equal(function__, "type", type, M);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("is_hetero", "M", M);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "is_hetero", "int",
        std::vector<size_t>{static_cast<size_t>(M)});
      is_hetero = std::vector<int>(M, std::numeric_limits<int>::min());
      current_statement__ = 42;
      is_hetero = context__.vals_i("is_hetero");
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "is_hetero", is_hetero,
        0);
      current_statement__ = 42;
      stan::math::check_less_or_equal(function__, "is_hetero", is_hetero, 1);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "alpha_eta", "double",
        std::vector<size_t>{});
      alpha_eta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 43;
      alpha_eta = context__.vals_r("alpha_eta")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "alpha_eta", alpha_eta,
        0);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "beta_eta", "double",
        std::vector<size_t>{});
      beta_eta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 44;
      beta_eta = context__.vals_r("beta_eta")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "beta_eta", beta_eta, 0);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "alpha_mu", "double",
        std::vector<size_t>{});
      alpha_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 45;
      alpha_mu = context__.vals_r("alpha_mu")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "alpha_mu", alpha_mu, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "beta_mu", "double",
        std::vector<size_t>{});
      beta_mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 46;
      beta_mu = context__.vals_r("beta_mu")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "beta_mu", beta_mu, 0);
      current_statement__ = 47;
      M_hetero = std::numeric_limits<int>::min();
      current_statement__ = 47;
      M_hetero = stan::math::sum(is_hetero);
      current_statement__ = 48;
      j = std::numeric_limits<int>::min();
      current_statement__ = 48;
      j = 1;
      current_statement__ = 49;
      stan::math::validate_non_negative_index("pos", "S", S);
      current_statement__ = 50;
      pos = std::vector<int>(S, std::numeric_limits<int>::min());
      current_statement__ = 51;
      stan::math::validate_non_negative_index("z", "N", N);
      current_statement__ = 52;
      z = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 53;
      stan::math::validate_non_negative_index("hetero_idx", "M_hetero",
        M_hetero);
      current_statement__ = 54;
      hetero_idx = std::vector<int>(M_hetero,
                     std::numeric_limits<int>::min());
      current_statement__ = 55;
      stan::math::validate_non_negative_index("inf_idx", "N", N);
      current_statement__ = 56;
      inf_idx = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 57;
      stan::model::assign(pos, 1, "assigning variable pos",
        stan::model::index_uni(1));
      current_statement__ = 60;
      for (int i = 2; i <= S; ++i) {
        current_statement__ = 58;
        stan::model::assign(pos,
          (stan::model::rvalue(pos, "pos", stan::model::index_uni((i - 1))) +
          stan::model::rvalue(n_i, "n_i", stan::model::index_uni((i - 1)))),
          "assigning variable pos", stan::model::index_uni(i));
      }
      current_statement__ = 63;
      for (int i = 1; i <= S; ++i) {
        current_statement__ = 61;
        stan::model::assign(z,
          offspring_count(
            stan::model::rvalue(n_i, "n_i", stan::model::index_uni(i)),
            stan::math::segment(beta,
              stan::model::rvalue(pos, "pos", stan::model::index_uni(i)),
              stan::model::rvalue(n_i, "n_i", stan::model::index_uni(i))),
            pstream__), "assigning variable z",
          stan::model::index_min_max(
            stan::model::rvalue(pos, "pos", stan::model::index_uni(i)),
            ((stan::model::rvalue(pos, "pos", stan::model::index_uni(i)) +
            stan::model::rvalue(n_i, "n_i", stan::model::index_uni(i))) - 1)));
      }
      current_statement__ = 69;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 67;
        if (stan::math::logical_eq(
              stan::model::rvalue(is_hetero, "is_hetero",
                stan::model::index_uni(i)), 1)) {
          current_statement__ = 64;
          stan::model::assign(hetero_idx, i, "assigning variable hetero_idx",
            stan::model::index_uni(j));
          current_statement__ = 65;
          j = (j + 1);
        }
      }
      current_statement__ = 72;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 70;
        stan::model::assign(inf_idx,
          stan::math::logical_eq(
            stan::model::rvalue(is_hetero, "is_hetero",
              stan::model::index_uni(
                stan::model::rvalue(type, "type", stan::model::index_uni(i)))),
            0), "assigning variable inf_idx", stan::model::index_uni(i));
      }
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "z", z, 0);
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "inf_idx", inf_idx, 0);
      current_statement__ = 56;
      stan::math::check_less_or_equal(function__, "inf_idx", inf_idx, 1);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("mu", "M", M);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("log_psi", "M_hetero", M_hetero);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("eta", "M", M);
      current_statement__ = 76;
      alpha_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 76;
      alpha_1dim__ = (2 * K);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("alpha", "2 * K", alpha_1dim__);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("psi", "M", M);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("A", "K", K);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("phase", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = M + M_hetero + M + alpha_1dim__;
  }
  inline std::string model_name() const final {
    return "model_branching_point_process";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_branching_point_process_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 1;
      mu = in__.template read_constrain_lb<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, M);
      Eigen::Matrix<local_scalar_t__,-1,1> log_psi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_hetero, DUMMY_VAR__);
      current_statement__ = 2;
      log_psi = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(M_hetero);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 3;
      eta = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, M);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> psi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 10;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 8;
        stan::model::assign(psi, stan::math::positive_infinity(),
          "assigning variable psi", stan::model::index_uni(i));
      }
      current_statement__ = 13;
      for (int i = 1; i <= M_hetero; ++i) {
        current_statement__ = 11;
        stan::model::assign(psi,
          stan::math::exp(
            stan::model::rvalue(log_psi, "log_psi", stan::model::index_uni(i))),
          "assigning variable psi",
          stan::model::index_uni(
            stan::model::rvalue(hetero_idx, "hetero_idx",
              stan::model::index_uni(i))));
      }
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "psi", psi, 0);
      {
        current_statement__ = 20;
        for (int i = 1; i <= S; ++i) {
          current_statement__ = 18;
          lp_accum__.add(cluster_lpdf<false>(
                           stan::math::segment(t,
                             stan::model::rvalue(pos, "pos",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(n_i, "n_i",
                               stan::model::index_uni(i))),
                           stan::math::segment(beta,
                             stan::model::rvalue(pos, "pos",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(n_i, "n_i",
                               stan::model::index_uni(i))),
                           stan::math::segment(z,
                             stan::model::rvalue(pos, "pos",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(n_i, "n_i",
                               stan::model::index_uni(i))),
                           stan::model::rvalue(a, "a",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(mu, "mu",
                             stan::model::index_multi(
                               stan::math::segment(type,
                                 stan::model::rvalue(pos, "pos",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(n_i, "n_i",
                                   stan::model::index_uni(i))))),
                           stan::model::rvalue(psi, "psi",
                             stan::model::index_multi(
                               stan::math::segment(type,
                                 stan::model::rvalue(pos, "pos",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(n_i, "n_i",
                                   stan::model::index_uni(i))))),
                           stan::model::rvalue(eta, "eta",
                             stan::model::index_multi(
                               stan::math::segment(type,
                                 stan::model::rvalue(pos, "pos",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(n_i, "n_i",
                                   stan::model::index_uni(i))))),
                           stan::math::segment(inf_idx,
                             stan::model::rvalue(pos, "pos",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(n_i, "n_i",
                               stan::model::index_uni(i))), omega, alpha,
                           pstream__));
        }
        current_statement__ = 21;
        lp_accum__.add(stan::math::gamma_lpdf<false>(mu, alpha_mu, beta_mu));
        current_statement__ = 22;
        lp_accum__.add(stan::math::normal_lpdf<false>(log_psi, 0, 1));
        current_statement__ = 23;
        lp_accum__.add(stan::math::gamma_lpdf<false>(eta, alpha_eta, beta_eta));
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_lpdf<false>(alpha, 0, (1 /
                         stan::math::sqrt((2 * K)))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_branching_point_process_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu = in__.template read_constrain_lb<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, M);
      Eigen::Matrix<double,-1,1> log_psi =
        Eigen::Matrix<double,-1,1>::Constant(M_hetero,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      log_psi = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(M_hetero);
      Eigen::Matrix<double,-1,1> eta =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      eta = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__, M);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(alpha_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      alpha = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_1dim__);
      Eigen::Matrix<double,-1,1> psi =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(mu);
      out__.write(log_psi);
      out__.write(eta);
      out__.write(alpha);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 10;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 8;
        stan::model::assign(psi, stan::math::positive_infinity(),
          "assigning variable psi", stan::model::index_uni(i));
      }
      current_statement__ = 13;
      for (int i = 1; i <= M_hetero; ++i) {
        current_statement__ = 11;
        stan::model::assign(psi,
          stan::math::exp(
            stan::model::rvalue(log_psi, "log_psi", stan::model::index_uni(i))),
          "assigning variable psi",
          stan::model::index_uni(
            stan::model::rvalue(hetero_idx, "hetero_idx",
              stan::model::index_uni(i))));
      }
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "psi", psi, 0);
      if (emit_transformed_parameters__) {
        out__.write(psi);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> A =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> phase =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      for (int i = 1; i <= K; ++i) {
        current_statement__ = 14;
        stan::model::assign(A,
          stan::math::sqrt(
            (stan::math::pow(
               stan::model::rvalue(alpha, "alpha",
                 stan::model::index_uni(((2 * i) - 1))), 2) +
            stan::math::pow(
              stan::model::rvalue(alpha, "alpha",
                stan::model::index_uni((2 * i))), 2))),
          "assigning variable A", stan::model::index_uni(i));
        current_statement__ = 15;
        stan::model::assign(phase,
          stan::math::atan2(
            stan::model::rvalue(alpha, "alpha",
              stan::model::index_uni((2 * i))),
            stan::model::rvalue(alpha, "alpha",
              stan::model::index_uni(((2 * i) - 1)))),
          "assigning variable phase", stan::model::index_uni(i));
      }
      out__.write(A);
      out__.write(phase);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(mu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable mu");
      out__.write_free_lb(0, mu);
      Eigen::Matrix<local_scalar_t__,-1,1> log_psi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_hetero, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(log_psi,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M_hetero),
        "assigning variable log_psi");
      out__.write(log_psi);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(eta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(M),
        "assigning variable eta");
      out__.write_free_lb(0, eta);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(alpha,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_1dim__),
        "assigning variable alpha");
      out__.write(alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "log_psi",
        "double", std::vector<size_t>{static_cast<size_t>(M_hetero)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "eta", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(alpha_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 1;
        mu_flat__ = context__.vals_r("mu");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(mu, mu_flat__[(pos__ - 1)],
            "assigning variable mu", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, mu);
      Eigen::Matrix<local_scalar_t__,-1,1> log_psi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_hetero, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_psi_flat__;
        current_statement__ = 2;
        log_psi_flat__ = context__.vals_r("log_psi");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= M_hetero; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(log_psi, log_psi_flat__[(pos__ - 1)],
            "assigning variable log_psi", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_psi);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 3;
        eta_flat__ = context__.vals_r("eta");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(eta, eta_flat__[(pos__ - 1)],
            "assigning variable eta", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, eta);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 4;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu", "log_psi", "eta", "alpha"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"psi"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"A", "phase"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(M)},
                std::vector<size_t>{static_cast<size_t>(M_hetero)},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{static_cast<size_t>(alpha_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(M)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(K)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M_hetero; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_psi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "phase" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M_hetero; ++sym1__) {
      param_names__.emplace_back(std::string() + "log_psi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "phase" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"log_psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_hetero) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"phase\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"log_psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_hetero) + "},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"phase\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((M + M_hetero) + M) + alpha_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (M);
    const size_t num_gen_quantities = emit_generated_quantities * ((K + K));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((M + M_hetero) + M) + alpha_1dim__);
    const size_t num_transformed = emit_transformed_parameters * (M);
    const size_t num_gen_quantities = emit_generated_quantities * ((K + K));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_branching_point_process_namespace::model_branching_point_process;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_branching_point_process_namespace::profiles__;
}
#endif
#endif
