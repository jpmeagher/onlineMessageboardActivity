// Generated by rstantools.  Do not edit by hand.

/*
    onlineMessageboardActivity is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    onlineMessageboardActivity is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with onlineMessageboardActivity.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_branching_point_process_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_branching_point_process");
    reader.add_event(293, 291, "end", "model_branching_point_process");
    return reader;
}
std::vector<int>
offspring_count(const int& N,
                    const std::vector<int>& beta, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        validate_non_negative_index("z", "N", N);
        std::vector<int  > z(N, int(0));
        stan::math::fill(z, std::numeric_limits<int>::min());
        current_statement_begin__ = 13;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 14;
            stan::model::assign(z, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable z");
            current_statement_begin__ = 15;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 16;
                stan::model::assign(z, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (stan::model::rvalue(z, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "z") + logical_eq(get_base1(beta, j, "beta", 1), i)), 
                            "assigning variable z");
            }
        }
        current_statement_begin__ = 19;
        return stan::math::promote_scalar<fun_return_scalar_t__>(z);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct offspring_count_functor__ {
            std::vector<int>
    operator()(const int& N,
                    const std::vector<int>& beta, std::ostream* pstream__) const {
        return offspring_count(N, beta, pstream__);
    }
};
template <typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
sinusoidal_basis(const int& K,
                     const int& N,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& t,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& omega, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 32;
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "(2 * K)", (2 * K));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X(N, (2 * K));
        stan::math::initialize(X, DUMMY_VAR__);
        stan::math::fill(X, DUMMY_VAR__);
        current_statement_begin__ = 34;
        for (int j = 1; j <= K; ++j) {
            current_statement_begin__ = 35;
            stan::model::assign(X, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(((2 * j) - 1)), stan::model::nil_index_list())), 
                        stan::math::sin(multiply(get_base1(omega, j, "omega", 1), t)), 
                        "assigning variable X");
            current_statement_begin__ = 36;
            stan::model::assign(X, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((2 * j)), stan::model::nil_index_list())), 
                        stan::math::cos(multiply(get_base1(omega, j, "omega", 1), t)), 
                        "assigning variable X");
        }
        current_statement_begin__ = 39;
        return stan::math::promote_scalar<fun_return_scalar_t__>(X);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sinusoidal_basis_functor__ {
    template <typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& K,
                     const int& N,
                     const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& t,
                     const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& omega, std::ostream* pstream__) const {
        return sinusoidal_basis(K, N, t, omega, pstream__);
    }
};
template <typename T2__, typename T3__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
sinusoidal_additive_model(const int& K,
                              const int& N,
                              const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& alpha,
                              const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& t,
                              const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& omega, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 53;
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "(2 * K)", (2 * K));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X(N, (2 * K));
        stan::math::initialize(X, DUMMY_VAR__);
        stan::math::fill(X, DUMMY_VAR__);
        stan::math::assign(X,sinusoidal_basis(K, N, t, omega, pstream__));
        current_statement_begin__ = 54;
        validate_non_negative_index("f", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> f(N);
        stan::math::initialize(f, DUMMY_VAR__);
        stan::math::fill(f, DUMMY_VAR__);
        stan::math::assign(f,multiply(X, alpha));
        current_statement_begin__ = 56;
        return stan::math::promote_scalar<fun_return_scalar_t__>(f);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sinusoidal_additive_model_functor__ {
    template <typename T2__, typename T3__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const int& K,
                              const int& N,
                              const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& alpha,
                              const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& t,
                              const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& omega, std::ostream* pstream__) const {
        return sinusoidal_additive_model(K, N, alpha, t, omega, pstream__);
    }
};
template <typename T2__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__>::type, Eigen::Dynamic, Eigen::Dynamic>
sam_exp_prod_integral_basis(const int& K,
                                const int& N,
                                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& t,
                                const T3__& a,
                                const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& omega,
                                const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& xi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 74;
        validate_non_negative_index("W", "N", N);
        validate_non_negative_index("W", "(2 * K)", (2 * K));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> W(N, (2 * K));
        stan::math::initialize(W, DUMMY_VAR__);
        stan::math::fill(W, DUMMY_VAR__);
        current_statement_begin__ = 76;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 77;
            for (int j = 1; j <= K; ++j) {
                current_statement_begin__ = 78;
                stan::model::assign(W, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(((2 * j) - 1)), stan::model::nil_index_list())), 
                            ((get_base1(xi, i, "xi", 1) / (pow(get_base1(xi, i, "xi", 1), 2) + pow(get_base1(omega, j, "omega", 1), 2))) * ((get_base1(xi, i, "xi", 1) * (stan::math::sin((get_base1(omega, j, "omega", 1) * get_base1(t, i, "t", 1))) - (stan::math::sin((get_base1(omega, j, "omega", 1) * a)) * stan::math::exp((-(get_base1(xi, i, "xi", 1)) * (a - get_base1(t, i, "t", 1))))))) + (get_base1(omega, j, "omega", 1) * (stan::math::cos((get_base1(omega, j, "omega", 1) * get_base1(t, i, "t", 1))) - (stan::math::cos((get_base1(omega, j, "omega", 1) * a)) * stan::math::exp((-(get_base1(xi, i, "xi", 1)) * (a - get_base1(t, i, "t", 1))))))))), 
                            "assigning variable W");
                current_statement_begin__ = 82;
                stan::model::assign(W, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((2 * j)), stan::model::nil_index_list())), 
                            ((get_base1(xi, i, "xi", 1) / (pow(get_base1(xi, i, "xi", 1), 2) + pow(get_base1(omega, j, "omega", 1), 2))) * ((get_base1(omega, j, "omega", 1) * ((stan::math::sin((get_base1(omega, j, "omega", 1) * a)) * stan::math::exp((-(get_base1(xi, i, "xi", 1)) * (a - get_base1(t, i, "t", 1))))) - stan::math::sin((get_base1(omega, j, "omega", 1) * get_base1(t, i, "t", 1))))) - (get_base1(xi, i, "xi", 1) * ((stan::math::cos((get_base1(omega, j, "omega", 1) * a)) * stan::math::exp((-(get_base1(xi, i, "xi", 1)) * (a - get_base1(t, i, "t", 1))))) - stan::math::cos((get_base1(omega, j, "omega", 1) * get_base1(t, i, "t", 1))))))), 
                            "assigning variable W");
            }
        }
        current_statement_begin__ = 89;
        return stan::math::promote_scalar<fun_return_scalar_t__>(W);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sam_exp_prod_integral_basis_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& K,
                                const int& N,
                                const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& t,
                                const T3__& a,
                                const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& omega,
                                const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& xi, std::ostream* pstream__) const {
        return sam_exp_prod_integral_basis(K, N, t, a, omega, xi, pstream__);
    }
};
template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__>::type>::type, Eigen::Dynamic, 1>
sam_exp_prod_integral(const int& K,
                          const int& N,
                          const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& alpha,
                          const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& t,
                          const T4__& a,
                          const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& omega,
                          const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& xi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 108;
        validate_non_negative_index("W", "N", N);
        validate_non_negative_index("W", "(2 * K)", (2 * K));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> W(N, (2 * K));
        stan::math::initialize(W, DUMMY_VAR__);
        stan::math::fill(W, DUMMY_VAR__);
        stan::math::assign(W,sam_exp_prod_integral_basis(K, N, t, a, omega, xi, pstream__));
        current_statement_begin__ = 111;
        validate_non_negative_index("F", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> F(N);
        stan::math::initialize(F, DUMMY_VAR__);
        stan::math::fill(F, DUMMY_VAR__);
        stan::math::assign(F,multiply(W, alpha));
        current_statement_begin__ = 113;
        return stan::math::promote_scalar<fun_return_scalar_t__>(F);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sam_exp_prod_integral_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__>::type>::type, Eigen::Dynamic, 1>
    operator()(const int& K,
                          const int& N,
                          const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& alpha,
                          const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& t,
                          const T4__& a,
                          const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& omega,
                          const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& xi, std::ostream* pstream__) const {
        return sam_exp_prod_integral(K, N, alpha, t, a, omega, xi, pstream__);
    }
};
template <bool propto, typename T0__, typename T3__, typename T4__, typename T5__, typename T6__, typename T8__, typename T9__>
typename boost::math::tools::promote_args<T0__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T8__, T9__>::type>::type
cluster_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& t,
                 const std::vector<int>& beta,
                 const std::vector<int>& z,
                 const T3__& a,
                 const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& mu,
                 const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& psi,
                 const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& eta,
                 const std::vector<int>& inf_idx,
                 const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& omega,
                 const Eigen::Matrix<T9__, Eigen::Dynamic, 1>& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T8__, T9__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 142;
        int K(0);
        (void) K;  // dummy to suppress unused var warning
        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,num_elements(omega));
        current_statement_begin__ = 143;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,num_elements(t));
        current_statement_begin__ = 145;
        validate_non_negative_index("alpha_fun", "(N - 1)", (N - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_fun((N - 1));
        stan::math::initialize(alpha_fun, DUMMY_VAR__);
        stan::math::fill(alpha_fun, DUMMY_VAR__);
        current_statement_begin__ = 146;
        validate_non_negative_index("l_alpha_fun", "(N - 1)", (N - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l_alpha_fun((N - 1));
        stan::math::initialize(l_alpha_fun, DUMMY_VAR__);
        stan::math::fill(l_alpha_fun, DUMMY_VAR__);
        current_statement_begin__ = 147;
        validate_non_negative_index("l_rho", "(N - 1)", (N - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l_rho((N - 1));
        stan::math::initialize(l_rho, DUMMY_VAR__);
        stan::math::fill(l_rho, DUMMY_VAR__);
        current_statement_begin__ = 149;
        validate_non_negative_index("C_rate", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> C_rate(N);
        stan::math::initialize(C_rate, DUMMY_VAR__);
        stan::math::fill(C_rate, DUMMY_VAR__);
        current_statement_begin__ = 150;
        validate_non_negative_index("l_norm", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l_norm(N);
        stan::math::initialize(l_norm, DUMMY_VAR__);
        stan::math::fill(l_norm, DUMMY_VAR__);
        current_statement_begin__ = 151;
        validate_non_negative_index("l_off", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l_off(N);
        stan::math::initialize(l_off, DUMMY_VAR__);
        stan::math::fill(l_off, DUMMY_VAR__);
        current_statement_begin__ = 152;
        validate_non_negative_index("l_disp", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l_disp(N);
        stan::math::initialize(l_disp, DUMMY_VAR__);
        stan::math::fill(l_disp, DUMMY_VAR__);
        current_statement_begin__ = 153;
        local_scalar_t__ ll(DUMMY_VAR__);
        (void) ll;  // dummy to suppress unused var warning
        stan::math::initialize(ll, DUMMY_VAR__);
        stan::math::fill(ll, DUMMY_VAR__);
        current_statement_begin__ = 155;
        stan::math::assign(alpha_fun, rep_vector(1, (N - 1)));
        current_statement_begin__ = 156;
        if (as_bool((primitive_value(logical_gt(K, 0)) && primitive_value(logical_gt(N, 1))))) {
            current_statement_begin__ = 157;
            stan::math::assign(alpha_fun, add(alpha_fun, sinusoidal_additive_model(K, (N - 1), alpha, stan::model::rvalue(t, stan::model::cons_list(stan::model::index_min_max(2, N), stan::model::nil_index_list()), "t"), omega, pstream__)));
        }
        current_statement_begin__ = 161;
        stan::math::assign(l_alpha_fun, stan::math::log(alpha_fun));
        current_statement_begin__ = 162;
        for (int i = 2; i <= N; ++i) {
            current_statement_begin__ = 162;
            stan::model::assign(l_rho, 
                        stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::nil_index_list()), 
                        exponential_log((get_base1(t, i, "t", 1) - get_base1(t, get_base1(beta, i, "beta", 1), "t", 1)), get_base1(eta, get_base1(beta, i, "beta", 1), "eta", 1)), 
                        "assigning variable l_rho");
        }
        current_statement_begin__ = 164;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 164;
            stan::model::assign(C_rate, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        exponential_cdf((a - get_base1(t, i, "t", 1)), get_base1(eta, i, "eta", 1)), 
                        "assigning variable C_rate");
        }
        current_statement_begin__ = 165;
        if (as_bool(logical_gt(K, 0))) {
            current_statement_begin__ = 166;
            stan::math::assign(C_rate, add(C_rate, sam_exp_prod_integral(K, N, alpha, t, a, omega, eta, pstream__)));
        }
        current_statement_begin__ = 171;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 173;
            stan::model::assign(l_off, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (get_base1(z, i, "z", 1) * stan::math::log(get_base1(mu, i, "mu", 1))), 
                        "assigning variable l_off");
            current_statement_begin__ = 175;
            if (as_bool(logical_eq(get_base1(inf_idx, i, "inf_idx", 1), 0))) {
                current_statement_begin__ = 176;
                stan::model::assign(l_norm, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ((stan::math::lgamma((get_base1(z, i, "z", 1) + get_base1(psi, i, "psi", 1))) - stan::math::lgamma(get_base1(psi, i, "psi", 1))) - (get_base1(z, i, "z", 1) * stan::math::log(((get_base1(mu, i, "mu", 1) * get_base1(C_rate, i, "C_rate", 1)) + get_base1(psi, i, "psi", 1))))), 
                            "assigning variable l_norm");
                current_statement_begin__ = 177;
                stan::model::assign(l_disp, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (-(get_base1(psi, i, "psi", 1)) * stan::math::log1p(((get_base1(mu, i, "mu", 1) * get_base1(C_rate, i, "C_rate", 1)) / get_base1(psi, i, "psi", 1)))), 
                            "assigning variable l_disp");
            } else {
                current_statement_begin__ = 179;
                stan::model::assign(l_norm, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable l_norm");
                current_statement_begin__ = 180;
                stan::model::assign(l_disp, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (-(get_base1(mu, i, "mu", 1)) * get_base1(C_rate, i, "C_rate", 1)), 
                            "assigning variable l_disp");
            }
        }
        current_statement_begin__ = 184;
        stan::math::assign(ll, (sum(add(l_alpha_fun, l_rho)) + sum(add(add(l_norm, l_off), l_disp))));
        current_statement_begin__ = 186;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T3__, typename T4__, typename T5__, typename T6__, typename T8__, typename T9__>
typename boost::math::tools::promote_args<T0__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T8__, T9__>::type>::type
cluster_lpdf(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& t,
                 const std::vector<int>& beta,
                 const std::vector<int>& z,
                 const T3__& a,
                 const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& mu,
                 const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& psi,
                 const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& eta,
                 const std::vector<int>& inf_idx,
                 const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& omega,
                 const Eigen::Matrix<T9__, Eigen::Dynamic, 1>& alpha, std::ostream* pstream__) {
    return cluster_lpdf<false>(t,beta,z,a,mu,psi,eta,inf_idx,omega,alpha, pstream__);
}
struct cluster_lpdf_functor__ {
    template <bool propto, typename T0__, typename T3__, typename T4__, typename T5__, typename T6__, typename T8__, typename T9__>
        typename boost::math::tools::promote_args<T0__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T8__, T9__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& t,
                 const std::vector<int>& beta,
                 const std::vector<int>& z,
                 const T3__& a,
                 const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& mu,
                 const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& psi,
                 const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& eta,
                 const std::vector<int>& inf_idx,
                 const Eigen::Matrix<T8__, Eigen::Dynamic, 1>& omega,
                 const Eigen::Matrix<T9__, Eigen::Dynamic, 1>& alpha, std::ostream* pstream__) const {
        return cluster_lpdf(t, beta, z, a, mu, psi, eta, inf_idx, omega, alpha, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_branching_point_process
  : public stan::model::model_base_crtp<model_branching_point_process> {
private:
        int N;
        int S;
        int K;
        int M;
        vector_d a;
        vector_d omega;
        vector_d t;
        std::vector<int> beta;
        std::vector<int> n_i;
        std::vector<int> type;
        std::vector<int> is_hetero;
        double alpha_eta;
        double beta_eta;
        double alpha_mu;
        double beta_mu;
        int M_hetero;
        int j;
        std::vector<int> pos;
        std::vector<int> z;
        std::vector<int> hetero_idx;
        std::vector<int> inf_idx;
public:
    model_branching_point_process(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_branching_point_process(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_branching_point_process_namespace::model_branching_point_process";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 192;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 193;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            check_greater_or_equal(function__, "S", S, 0);
            current_statement_begin__ = 194;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 195;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 196;
            validate_non_negative_index("a", "S", S);
            context__.validate_dims("data initialization", "a", "vector_d", context__.to_vec(S));
            a = Eigen::Matrix<double, Eigen::Dynamic, 1>(S);
            vals_r__ = context__.vals_r("a");
            pos__ = 0;
            size_t a_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                a(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "a", a, 0);
            current_statement_begin__ = 197;
            validate_non_negative_index("omega", "K", K);
            context__.validate_dims("data initialization", "omega", "vector_d", context__.to_vec(K));
            omega = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("omega");
            pos__ = 0;
            size_t omega_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
                omega(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 198;
            validate_non_negative_index("t", "N", N);
            context__.validate_dims("data initialization", "t", "vector_d", context__.to_vec(N));
            t = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("t");
            pos__ = 0;
            size_t t_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < t_j_1_max__; ++j_1__) {
                t(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 199;
            validate_non_negative_index("beta", "N", N);
            context__.validate_dims("data initialization", "beta", "int", context__.to_vec(N));
            beta = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("beta");
            pos__ = 0;
            size_t beta_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                beta[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 200;
            validate_non_negative_index("n_i", "S", S);
            context__.validate_dims("data initialization", "n_i", "int", context__.to_vec(S));
            n_i = std::vector<int>(S, int(0));
            vals_i__ = context__.vals_i("n_i");
            pos__ = 0;
            size_t n_i_k_0_max__ = S;
            for (size_t k_0__ = 0; k_0__ < n_i_k_0_max__; ++k_0__) {
                n_i[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 201;
            validate_non_negative_index("type", "N", N);
            context__.validate_dims("data initialization", "type", "int", context__.to_vec(N));
            type = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("type");
            pos__ = 0;
            size_t type_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < type_k_0_max__; ++k_0__) {
                type[k_0__] = vals_i__[pos__++];
            }
            size_t type_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < type_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "type[i_0__]", type[i_0__], 1);
                check_less_or_equal(function__, "type[i_0__]", type[i_0__], M);
            }
            current_statement_begin__ = 202;
            validate_non_negative_index("is_hetero", "M", M);
            context__.validate_dims("data initialization", "is_hetero", "int", context__.to_vec(M));
            is_hetero = std::vector<int>(M, int(0));
            vals_i__ = context__.vals_i("is_hetero");
            pos__ = 0;
            size_t is_hetero_k_0_max__ = M;
            for (size_t k_0__ = 0; k_0__ < is_hetero_k_0_max__; ++k_0__) {
                is_hetero[k_0__] = vals_i__[pos__++];
            }
            size_t is_hetero_i_0_max__ = M;
            for (size_t i_0__ = 0; i_0__ < is_hetero_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "is_hetero[i_0__]", is_hetero[i_0__], 0);
                check_less_or_equal(function__, "is_hetero[i_0__]", is_hetero[i_0__], 1);
            }
            current_statement_begin__ = 203;
            context__.validate_dims("data initialization", "alpha_eta", "double", context__.to_vec());
            alpha_eta = double(0);
            vals_r__ = context__.vals_r("alpha_eta");
            pos__ = 0;
            alpha_eta = vals_r__[pos__++];
            check_greater_or_equal(function__, "alpha_eta", alpha_eta, 0);
            current_statement_begin__ = 204;
            context__.validate_dims("data initialization", "beta_eta", "double", context__.to_vec());
            beta_eta = double(0);
            vals_r__ = context__.vals_r("beta_eta");
            pos__ = 0;
            beta_eta = vals_r__[pos__++];
            check_greater_or_equal(function__, "beta_eta", beta_eta, 0);
            current_statement_begin__ = 205;
            context__.validate_dims("data initialization", "alpha_mu", "double", context__.to_vec());
            alpha_mu = double(0);
            vals_r__ = context__.vals_r("alpha_mu");
            pos__ = 0;
            alpha_mu = vals_r__[pos__++];
            check_greater_or_equal(function__, "alpha_mu", alpha_mu, 0);
            current_statement_begin__ = 206;
            context__.validate_dims("data initialization", "beta_mu", "double", context__.to_vec());
            beta_mu = double(0);
            vals_r__ = context__.vals_r("beta_mu");
            pos__ = 0;
            beta_mu = vals_r__[pos__++];
            check_greater_or_equal(function__, "beta_mu", beta_mu, 0);
            // initialize transformed data variables
            current_statement_begin__ = 211;
            M_hetero = int(0);
            stan::math::fill(M_hetero, std::numeric_limits<int>::min());
            stan::math::assign(M_hetero,sum(is_hetero));
            current_statement_begin__ = 212;
            j = int(0);
            stan::math::fill(j, std::numeric_limits<int>::min());
            stan::math::assign(j,1);
            current_statement_begin__ = 214;
            validate_non_negative_index("pos", "S", S);
            pos = std::vector<int>(S, int(0));
            stan::math::fill(pos, std::numeric_limits<int>::min());
            current_statement_begin__ = 215;
            validate_non_negative_index("z", "N", N);
            z = std::vector<int>(N, int(0));
            stan::math::fill(z, std::numeric_limits<int>::min());
            current_statement_begin__ = 216;
            validate_non_negative_index("hetero_idx", "M_hetero", M_hetero);
            hetero_idx = std::vector<int>(M_hetero, int(0));
            stan::math::fill(hetero_idx, std::numeric_limits<int>::min());
            current_statement_begin__ = 217;
            validate_non_negative_index("inf_idx", "N", N);
            inf_idx = std::vector<int>(N, int(0));
            stan::math::fill(inf_idx, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 219;
            stan::model::assign(pos, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable pos");
            current_statement_begin__ = 220;
            for (int i = 2; i <= S; ++i) {
                current_statement_begin__ = 221;
                stan::model::assign(pos, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(pos, (i - 1), "pos", 1) + get_base1(n_i, (i - 1), "n_i", 1)), 
                            "assigning variable pos");
            }
            current_statement_begin__ = 224;
            for (int i = 1; i <= S; ++i) {
                current_statement_begin__ = 225;
                stan::model::assign(z, 
                            stan::model::cons_list(stan::model::index_min_max(get_base1(pos, i, "pos", 1), ((get_base1(pos, i, "pos", 1) + get_base1(n_i, i, "n_i", 1)) - 1)), stan::model::nil_index_list()), 
                            offspring_count(get_base1(n_i, i, "n_i", 1), segment(beta, get_base1(pos, i, "pos", 1), get_base1(n_i, i, "n_i", 1)), pstream__), 
                            "assigning variable z");
            }
            current_statement_begin__ = 228;
            for (int i = 1; i <= M; ++i) {
                current_statement_begin__ = 229;
                if (as_bool(logical_eq(get_base1(is_hetero, i, "is_hetero", 1), 1))) {
                    current_statement_begin__ = 230;
                    stan::model::assign(hetero_idx, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                i, 
                                "assigning variable hetero_idx");
                    current_statement_begin__ = 231;
                    stan::math::assign(j, (j + 1));
                }
            }
            current_statement_begin__ = 235;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 236;
                stan::model::assign(inf_idx, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            logical_eq(get_base1(is_hetero, get_base1(type, i, "type", 1), "is_hetero", 1), 0), 
                            "assigning variable inf_idx");
            }
            // validate transformed data
            current_statement_begin__ = 215;
            size_t z_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < z_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "z[i_0__]", z[i_0__], 0);
            }
            current_statement_begin__ = 217;
            size_t inf_idx_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < inf_idx_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "inf_idx[i_0__]", inf_idx[i_0__], 0);
                check_less_or_equal(function__, "inf_idx[i_0__]", inf_idx[i_0__], 1);
            }
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 241;
            validate_non_negative_index("mu", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 242;
            validate_non_negative_index("log_psi", "M_hetero", M_hetero);
            num_params_r__ += M_hetero;
            current_statement_begin__ = 243;
            validate_non_negative_index("eta", "M", M);
            num_params_r__ += M;
            current_statement_begin__ = 244;
            validate_non_negative_index("alpha", "(2 * K)", (2 * K));
            num_params_r__ += (2 * K);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_branching_point_process() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 241;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "M", M);
        context__.validate_dims("parameter initialization", "mu", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu(M);
        size_t mu_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            mu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 242;
        if (!(context__.contains_r("log_psi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_psi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_psi");
        pos__ = 0U;
        validate_non_negative_index("log_psi", "M_hetero", M_hetero);
        context__.validate_dims("parameter initialization", "log_psi", "vector_d", context__.to_vec(M_hetero));
        Eigen::Matrix<double, Eigen::Dynamic, 1> log_psi(M_hetero);
        size_t log_psi_j_1_max__ = M_hetero;
        for (size_t j_1__ = 0; j_1__ < log_psi_j_1_max__; ++j_1__) {
            log_psi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(log_psi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_psi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 243;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "M", M);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta(M);
        size_t eta_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            eta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 244;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "(2 * K)", (2 * K));
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec((2 * K)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha((2 * K));
        size_t alpha_j_1_max__ = (2 * K);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 241;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.vector_lb_constrain(0, M, lp__);
            else
                mu = in__.vector_lb_constrain(0, M);
            current_statement_begin__ = 242;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> log_psi;
            (void) log_psi;  // dummy to suppress unused var warning
            if (jacobian__)
                log_psi = in__.vector_constrain(M_hetero, lp__);
            else
                log_psi = in__.vector_constrain(M_hetero);
            current_statement_begin__ = 243;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta;
            (void) eta;  // dummy to suppress unused var warning
            if (jacobian__)
                eta = in__.vector_lb_constrain(0, M, lp__);
            else
                eta = in__.vector_lb_constrain(0, M);
            current_statement_begin__ = 244;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_constrain((2 * K), lp__);
            else
                alpha = in__.vector_constrain((2 * K));
            // transformed parameters
            current_statement_begin__ = 249;
            validate_non_negative_index("psi", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi(M);
            stan::math::initialize(psi, DUMMY_VAR__);
            stan::math::fill(psi, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 251;
            for (int i = 1; i <= M; ++i) {
                current_statement_begin__ = 252;
                stan::model::assign(psi, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::positive_infinity(), 
                            "assigning variable psi");
            }
            current_statement_begin__ = 254;
            for (int i = 1; i <= M_hetero; ++i) {
                current_statement_begin__ = 255;
                stan::model::assign(psi, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(hetero_idx, i, "hetero_idx", 1)), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(log_psi, i, "log_psi", 1)), 
                            "assigning variable psi");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 249;
            size_t psi_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(psi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: psi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable psi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "psi", psi, 0);
            // model body
            current_statement_begin__ = 262;
            for (int i = 1; i <= S; ++i) {
                current_statement_begin__ = 263;
                lp_accum__.add(cluster_lpdf(segment(t, get_base1(pos, i, "pos", 1), get_base1(n_i, i, "n_i", 1)), segment(beta, get_base1(pos, i, "pos", 1), get_base1(n_i, i, "n_i", 1)), segment(z, get_base1(pos, i, "pos", 1), get_base1(n_i, i, "n_i", 1)), get_base1(a, i, "a", 1), stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_multi(segment(type, get_base1(pos, i, "pos", 1), get_base1(n_i, i, "n_i", 1))), stan::model::nil_index_list()), "mu"), stan::model::rvalue(psi, stan::model::cons_list(stan::model::index_multi(segment(type, get_base1(pos, i, "pos", 1), get_base1(n_i, i, "n_i", 1))), stan::model::nil_index_list()), "psi"), stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_multi(segment(type, get_base1(pos, i, "pos", 1), get_base1(n_i, i, "n_i", 1))), stan::model::nil_index_list()), "eta"), segment(inf_idx, get_base1(pos, i, "pos", 1), get_base1(n_i, i, "n_i", 1)), omega, alpha, pstream__));
            }
            current_statement_begin__ = 276;
            lp_accum__.add(gamma_log(mu, alpha_mu, beta_mu));
            current_statement_begin__ = 277;
            lp_accum__.add(normal_log(log_psi, 0, 1));
            current_statement_begin__ = 278;
            lp_accum__.add(gamma_log(eta, alpha_eta, beta_eta));
            current_statement_begin__ = 279;
            lp_accum__.add(normal_log(alpha, 0, (1 / stan::math::sqrt((2 * K)))));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("log_psi");
        names__.push_back("eta");
        names__.push_back("alpha");
        names__.push_back("psi");
        names__.push_back("A");
        names__.push_back("phase");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_hetero);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((2 * K));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_branching_point_process_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu = in__.vector_lb_constrain(0, M);
        size_t mu_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            vars__.push_back(mu(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> log_psi = in__.vector_constrain(M_hetero);
        size_t log_psi_j_1_max__ = M_hetero;
        for (size_t j_1__ = 0; j_1__ < log_psi_j_1_max__; ++j_1__) {
            vars__.push_back(log_psi(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta = in__.vector_lb_constrain(0, M);
        size_t eta_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            vars__.push_back(eta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_constrain((2 * K));
        size_t alpha_j_1_max__ = (2 * K);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 249;
            validate_non_negative_index("psi", "M", M);
            Eigen::Matrix<double, Eigen::Dynamic, 1> psi(M);
            stan::math::initialize(psi, DUMMY_VAR__);
            stan::math::fill(psi, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 251;
            for (int i = 1; i <= M; ++i) {
                current_statement_begin__ = 252;
                stan::model::assign(psi, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::positive_infinity(), 
                            "assigning variable psi");
            }
            current_statement_begin__ = 254;
            for (int i = 1; i <= M_hetero; ++i) {
                current_statement_begin__ = 255;
                stan::model::assign(psi, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(hetero_idx, i, "hetero_idx", 1)), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(log_psi, i, "log_psi", 1)), 
                            "assigning variable psi");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 249;
            check_greater_or_equal(function__, "psi", psi, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t psi_j_1_max__ = M;
                for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
                    vars__.push_back(psi(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 284;
            validate_non_negative_index("A", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> A(K);
            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A, DUMMY_VAR__);
            current_statement_begin__ = 285;
            validate_non_negative_index("phase", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> phase(K);
            stan::math::initialize(phase, DUMMY_VAR__);
            stan::math::fill(phase, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 287;
            for (int i = 1; i <= K; ++i) {
                current_statement_begin__ = 288;
                stan::model::assign(A, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::sqrt((pow(get_base1(alpha, ((2 * i) - 1), "alpha", 1), 2) + pow(get_base1(alpha, (2 * i), "alpha", 1), 2))), 
                            "assigning variable A");
                current_statement_begin__ = 289;
                stan::model::assign(phase, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            atan2(get_base1(alpha, (2 * i), "alpha", 1), get_base1(alpha, ((2 * i) - 1), "alpha", 1)), 
                            "assigning variable phase");
            }
            // validate, write generated quantities
            current_statement_begin__ = 284;
            size_t A_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                vars__.push_back(A(j_1__));
            }
            current_statement_begin__ = 285;
            size_t phase_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < phase_j_1_max__; ++j_1__) {
                vars__.push_back(phase(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_branching_point_process";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mu_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_psi_j_1_max__ = M_hetero;
        for (size_t j_1__ = 0; j_1__ < log_psi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_psi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_1_max__ = (2 * K);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t psi_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t A_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phase_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phase_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phase" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mu_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_psi_j_1_max__ = M_hetero;
        for (size_t j_1__ = 0; j_1__ < log_psi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_psi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_j_1_max__ = (2 * K);
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t psi_j_1_max__ = M;
            for (size_t j_1__ = 0; j_1__ < psi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "psi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t A_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phase_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < phase_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phase" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_branching_point_process_namespace::model_branching_point_process stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
